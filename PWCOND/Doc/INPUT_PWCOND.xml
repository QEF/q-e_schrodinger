<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="input_xx.xsl"?>
<!-- FILE AUTOMATICALLY CREATED: DO NOT EDIT, CHANGES WILL BE LOST -->
    
<input_description distribution="Quantum ESPRESSO" package="PWscf" program="pwcond.x" >
   <toc>
   </toc>
   <intro>
This program computes the transmittance of a system and/or its
complex band structure.
It is controlled through the following variables
in the namelist inputcond.

Structure of the input data:
============================

   &amp;INPUTCOND
     ...
   /
   </intro>
   <namelist name="INPUTCOND" >
      <var name="outdir" type="CHARACTER" >
         <info>
temporary directory (as in PWscf)
         </info>
      </var>
      <var name="prefixt" type="CHARACTER" >
         <info>
prefix for the file (as in PWscf) containing all the
regions (left lead + scatt. reg. + right lead)
         </info>
      </var>
      <var name="prefixl" type="CHARACTER" >
         <info>
prefix for the file containing only the        left lead
         </info>
      </var>
      <var name="prefixs" type="CHARACTER" >
         <info>
prefix for the file containing the scattering region
         </info>
      </var>
      <var name="prefixr" type="CHARACTER" >
         <info>
prefix for the file containing only the right lead
         </info>
      </var>
      <var name="tran_prefix" type="CHARACTER" >
         <default> none
         </default>
         <see> recover
         </see>
         <info>
if tran_prefix is specified the program will save partial results
of a transmission calculation (ikind .GE. 1) in a specific
directory (outdir/tran_prefix.cond_save)
         </info>
      </var>
      <var name="max_seconds" type="REAL" >
         <default> 1.D+7, or 150 days, i.e. no time limit
         </default>
         <see> tran_prefix
         </see>
         <info>
jobs stops after max_seconds elapsed time (wallclock time).
It can be enabled only if tran_prefix is specified.
         </info>
      </var>
      <var name="recover" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <see> tran_prefix
         </see>
         <info>
restarts a previously interrupted transmission calculation (only if
tran_prefix was specified). It can also be used to gather partial
results from a calculation that was split by using start_e,last_e
and/or start_k,last_k (see corresponding keywords).
         </info>
      </var>
      <var name="band_file" type="CHARACTER" >
         <info>
file on which the complex bands are saved
         </info>
      </var>
      <var name="tran_file" type="CHARACTER" >
         <info>
file where the transmission is written
         </info>
      </var>
      <var name="save_file" type="CHARACTER" >
         <info>
file where the data necessary for PWCOND are written
so that no prefix files of PW are longer needed
         </info>
      </var>
      <var name="fil_loc" type="CHARACTER" >
         <info>
file on/from which the 2D eigenvalue problem data are
saved/read
         </info>
      </var>
      <var name="lwrite_cond" type="LOGICAL" >
         <info>
if .t. save the data necessary for PWCOND in save_file
         </info>
      </var>
      <var name="loop_ek" type="LOGICAL" >
         <info>
if .t. the energy loop is outside the k-point loop
         </info>
      </var>
      <var name="lread_cond" type="LOGICAL" >
         <info>
if .t. read the data necessary for PWCOND from save_file
         </info>
      </var>
      <var name="lwrite_loc" type="LOGICAL" >
         <info>
if .t. save 2D eigenvalue problem result in fil_loc
         </info>
      </var>
      <var name="lread_loc" type="LOGICAL" >
         <info>
if .t. read 2D eigenvalue problem result from fil_loc
         </info>
      </var>
      <var name="ikind" type="INTEGER" >
         <info>
The kind of conductance calculation:

ikind=0  - just complex band structure (CBS) calculation

ikind=1  - conductance calculation with identical
           left and right leads

ikind=2  - conductance calculation with different
           left and right leads
         </info>
      </var>
      <var name="iofspin" type="INTEGER" >
         <info>
spin index for which the calculations are performed
         </info>
      </var>
      <var name="tk_plot" type="INTEGER" >
         <info>
if &gt; 0, plot T(kx,ky) at each energy in the region [tk_plot x full BZ]
         </info>
      </var>
      <var name="llocal" type="LOGICAL" >
         <info>
if .t. calculations are done with only local part of PP
         </info>
      </var>
      <var name="bdl" type="REAL" >
         <info>
right boundary of the left lead (left one is supposed to be at 0)
(in units of lattice parameter &quot;alat&quot; defined in the scf run)
         </info>
      </var>
      <var name="bds" type="REAL" >
         <info>
right boundary of the scatt. reg. (left one is at 0 if prefixs
is used and = bdl if prefixt is used)
(in units of lattice parameter &quot;alat&quot; defined in the scf run)
         </info>
      </var>
      <var name="bdr" type="REAL" >
         <info>
right boundary of the right lead (left one is at 0 if prefixr
is used and = bds if prefixt is used)
(in units of lattice parameter &quot;alat&quot; defined in the scf run)
         </info>
      </var>
      <var name="nz1" type="INTEGER" >
         <info>
the number of subslabs in the slab (to calculate integrals)
         </info>
      </var>
      <var name="energy0" type="REAL" >
         <info>
initial energy
         </info>
      </var>
      <var name="denergy" type="REAL" >
         <info>
energy step (if denergy=0.0 the energy is read from the list)
         </info>
      </var>
      <var name="nenergy" type="INTEGER" >
         <info>
number of energies

WARNING: the energy in input file is given in eV taken from Ef,
         and denergy should be negative
         </info>
      </var>
      <var name="start_e" type="INTEGER" >
         <default> 1
         </default>
         <see> last_e
         </see>
         <info>
if start_e &gt; 1, the scattering problem is solved only for those
energies with index between start_e and last_e in the energy list.

NOTE: start_e &lt;= last_e and start_e &lt;= nenergy must be satisfied
         </info>
      </var>
      <var name="last_e" type="INTEGER" >
         <default> nenergy
         </default>
         <see> start_e
         </see>
         <info>
index of the last energy to be computed. If last_e &gt; nenergy,
then last_e will be automatically set to nenergy.
         </info>
      </var>
      <var name="start_k" type="INTEGER" >
         <default> 1
         </default>
         <see> last_k
         </see>
         <info>
if start_k &gt; 1, the scattering problem is solved only for those
k-points with index between start_k and last_k in the k-point list.
In order to recover the full transmission (i.e. integrated over the
full Brillouin Zone) at the end, perform the partial runs specifying
a value for tran_prefix (the restart directory), then put all the
partial transmission files &apos;transmission_k#_e#&apos; inside a unique
restart directory and run pwcond.x with recover=.TRUE. (without
specifying any value for start_k and last_k).

NOTE: start_k &lt;= last_k must be satisfied and start_k must also
   not be greater than the actual number of k-point in the list
   (if you compute the grid automatically by specifying the grid
   size and shifts, you can use kpoints.x to check that number).
         </info>
      </var>
      <var name="last_k" type="INTEGER" >
         <default> nenergy
         </default>
         <see> start_k
         </see>
         <info>
index of the last k-point to be computed. If last_k is bigger than the
actual number of points in the list, then it will be set to that number.
         </info>
      </var>
      <var name="ecut2d" type="REAL" >
         <info>
2-D cutoff
         </info>
      </var>
      <var name="ewind" type="REAL" >
         <info>
the energy window for reduction of 2D plane wave basis set (in XY)
         </info>
      </var>
      <var name="epsproj" type="REAL" >
         <info>
accuracy of 2D basis set reduction
         </info>
      </var>
      <var name="orbj_in" type="REAL" >
         <info>
the initial orbital for projecting the transmission
         </info>
      </var>
      <var name="orbj_fin" type="REAL" >
         <info>
the final orbital for projecting the transmission
         </info>
      </var>
   </namelist>
   <card name="K_and_Energy_Points" nameless="1" >
      <syntax>
         <line>
            <var name="nkpts" type="INTEGER" >
               <info>
Number of k_\perp points
               </info>
            </var>
         </line>
         <table name="k_points" >
            <rows start="1" end="nkpts" >
               <colgroup type="REAL" >
                  <col name="kx" >
                  </col>
                  <col name="ky" >
                  </col>
                  <col name="weight" >
                  </col>
                  <info>
k-point coordinates and weights
                  </info>
               </colgroup>
            </rows>
         </table>
         <line>
            <var name="nenergy" type="INTEGER" >
               <info>
number of energy points
               </info>
            </var>
         </line>
      </syntax>
   </card>
</input_description>

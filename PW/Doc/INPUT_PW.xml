<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="input_xx.xsl"?>
<!-- FILE AUTOMATICALLY CREATED: DO NOT EDIT, CHANGES WILL BE LOST -->
    
<input_description distribution="Quantum ESPRESSO" package="PWscf" program="pw.x" >
   <toc>
   </toc>
   <intro>
<b>Input data format:</b> { } = optional, [ ] = it depends, | = or

All quantities whose dimensions are not explicitly specified are in
RYDBERG ATOMIC UNITS. Charge is &quot;number&quot; charge (i.e. not multiplied
by e); potentials are in energy units (i.e. they are multiplied by e).

<b>BEWARE:</b> TABS, CRLF, ANY OTHER STRANGE CHARACTER, ARE A SOURCES OF TROUBLE
<b>USE</b> ONLY PLAIN ASCII TEXT FILES (CHECK THE FILE TYPE WITH UNIX COMMAND &quot;file&quot;)

Namelists must appear in the order given below.
Comment lines in <i>namelists</i> can be introduced by a &quot;!&quot;, exactly as in
fortran code. Comments lines in <i>cards</i> can be introduced by
either a &quot;!&quot; or a &quot;#&quot; character in the first position of a line.
Do not start any line in <i>cards</i> with a &quot;/&quot; character.
Leave a space between card names and card options, e.g.
ATOMIC_POSITIONS (bohr), not ATOMIC_POSITIONS(bohr)


<b>Structure of the input data:</b>
===============================================================================

<b>&amp;CONTROL</b>
  ...
<b>/</b>

<b>&amp;SYSTEM</b>
  ...
<b>/</b>

<b>&amp;ELECTRONS</b>
  ...
<b>/</b>

[ <b>&amp;IONS</b>
  ...
 <b>/</b> ]

[ <b>&amp;CELL</b>
  ...
 <b>/</b> ]

[ <b>&amp;FCP</b>
  ...
 <b>/</b> ]

[ <b>&amp;RISM</b>
  ...
 <b>/</b> ]

<b>ATOMIC_SPECIES</b>
 X  Mass_X  PseudoPot_X
 Y  Mass_Y  PseudoPot_Y
 Z  Mass_Z  PseudoPot_Z

<b>ATOMIC_POSITIONS</b> { alat | bohr | angstrom | crystal | crystal_sg }
  X 0.0  0.0  0.0  {if_pos(1) if_pos(2) if_pos(3)}
  Y 0.5  0.0  0.0
  Z 0.0  0.2  0.2

<b>K_POINTS</b> { tpiba | automatic | crystal | gamma | tpiba_b | crystal_b | tpiba_c | crystal_c }
if (gamma)
   nothing to read
if (automatic)
   nk1, nk2, nk3, k1, k2, k3
if (not automatic)
   nks
   xk_x, xk_y, xk_z,  wk
if (tpipa_b or crystal_b in a &apos;bands&apos; calculation) see Doc/brillouin_zones.pdf

[ <b>CELL_PARAMETERS</b> { alat | bohr | angstrom }
   v1(1) v1(2) v1(3)
   v2(1) v2(2) v2(3)
   v3(1) v3(2) v3(3) ]

[ <b>OCCUPATIONS</b>
   f_inp1(1)  f_inp1(2)  f_inp1(3) ... f_inp1(10)
   f_inp1(11) f_inp1(12) ... f_inp1(nbnd)
 [ f_inp2(1)  f_inp2(2)  f_inp2(3) ... f_inp2(10)
   f_inp2(11) f_inp2(12) ... f_inp2(nbnd) ] ]

[ <b>CONSTRAINTS</b>
   nconstr  { constr_tol }
   constr_type(.)   constr(1,.)   constr(2,.) [ constr(3,.)   constr(4,.) ] { constr_target(.) } ]

[ <b>ATOMIC_VELOCITIES</b>
   label(1)  vx(1) vy(1) vz(1)
   .....
   label(n)  vx(n) vy(n) vz(n) ]

[ <b>ATOMIC_FORCES</b>
   label(1)  Fx(1) Fy(1) Fz(1)
   .....
   label(n)  Fx(n) Fy(n) Fz(n) ]

[ <b>ADDITIONAL_K_POINTS</b>
     see: K_POINTS ]

[ <b>SOLVENTS</b>
   label(1)     Density(1)     Molecule(1)
   label(2)     Density(2)     Molecule(2)
   .....
   label(nsolv) Density(nsolv) Molecule(nsolv) ]

[ <b>HUBBARD</b> { atomic | ortho-atomic | norm-atomic | wf | pseudo }
  if (DFT+U)
      U  label(1)-manifold(1) u_val(1)
    [ J0 label(1)-manifold(1) j0_val(1) ]
      .....
      U  label(n)-manifold(n) u_val(n)
    [ J0 label(n)-manifold(n) j0_val(n) ]
  if (DFT+U+J)
      paramType(1) label(1)-manifold(1) paramValue(1)
      .....
      paramType(n) label(n)-manifold(n) paramValue(n)
  if (DFT+U+V)
      U  label(I)-manifold(I) u_val(I)
    [ J0 label(I)-manifold(I) j0_val(I) ]
      V  label(I)-manifold(I) label(J)-manifold(J) I J v_val(I,J)
      .....
      U  label(N)-manifold(N) u_val(N)
    [ J0 label(N)-manifold(N) j0_val(N) ]
      V  label(N)-manifold(N) label(M)-manifold(M) N M v_val(N,M)
]
All Hubbard parameters must be specified in eV.
manifold  = 3d, 2p, 4f...
paramType = U, J, B, E2, or E3
Check Doc/Hubbard_input.pdf for more details.
   </intro>
   <namelist name="CONTROL" >
      <var name="calculation" type="CHARACTER" >
         <default> &apos;scf&apos;
         </default>
         <options>
            <info>
A string describing the task to be performed. Options are:
            </info>
            <opt val="'scf'" >
            </opt>
            <opt val="'nscf'" >
            </opt>
            <opt val="'bands'" >
            </opt>
            <opt val="'relax'" >
            </opt>
            <opt val="'md'" >
            </opt>
            <opt val="'vc-relax'" >
            </opt>
            <opt val="'vc-md'" >
            </opt>
            <info>
(vc = variable-cell).
            </info>
         </options>
      </var>
      <var name="title" type="CHARACTER" >
         <default> &apos; &apos;
         </default>
         <info>
reprinted on output.
         </info>
      </var>
      <var name="verbosity" type="CHARACTER" >
         <default> &apos;low&apos;
         </default>
         <options>
            <info>
Currently two verbosity levels are implemented:
            </info>
            <opt val="'high'" >
            </opt>
            <opt val="'low'" >
            </opt>
            <info>
<b>&apos;debug&apos;</b> and <b>&apos;medium&apos;</b> have the same effect as <b>&apos;high&apos;;</b>
<b>&apos;default&apos;</b> and <b>&apos;minimal&apos;</b> as <b>&apos;low&apos;</b>
            </info>
         </options>
      </var>
      <var name="restart_mode" type="CHARACTER" >
         <default> &apos;from_scratch&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'from_scratch'" >
From scratch. This is the normal way to perform a PWscf calculation
            </opt>
            <opt val="'restart'" >
From previous interrupted run. Use this switch only if you want to
continue, using the same number of processors and parallelization,
an interrupted calculation. Do not use to start a new one, or to
perform a non-scf calculations.  Works only if the calculation was
cleanly stopped using variable <ref>max_seconds</ref>, or by user request
with an &quot;exit file&quot; (i.e.: create a file &quot;prefix&quot;.EXIT, in directory
&quot;outdir&quot;; see variables <ref>prefix</ref>, <ref>outdir</ref>). The default for
<ref>startingwfc</ref> and <ref>startingpot</ref> is set to &apos;file&apos;.
            </opt>
         </options>
      </var>
      <var name="wf_collect" type="LOGICAL" >
         <info> OBSOLETE - NO LONGER IMPLEMENTED
         </info>
      </var>
      <var name="nstep" type="INTEGER" >
         <info>
number of molecular-dynamics or structural optimization steps
performed in this run. If set to 0, the code performs a quick
&quot;dry run&quot;, stopping just after initialization. This is useful
to check for input correctness and to have the summary printed.
NOTE: in MD calculations, the code will perform &quot;nstep&quot; steps
even if restarting from a previously interrupted calculation.
         </info>
         <default>
1  if <ref>calculation</ref> == &apos;scf&apos;, &apos;nscf&apos;, &apos;bands&apos;;
50 for the other cases
         </default>
      </var>
      <var name="iprint" type="INTEGER" >
         <default> write only at convergence
         </default>
         <info>
band energies are written every <i>iprint</i> iterations
         </info>
      </var>
      <var name="tstress" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
calculate stress. It is set to .TRUE. automatically if
<ref>calculation</ref> == &apos;vc-md&apos; or &apos;vc-relax&apos;
         </info>
      </var>
      <var name="tprnfor" type="LOGICAL" >
         <info>
calculate forces. It is set to .TRUE. automatically if
<ref>calculation</ref> == &apos;relax&apos;,&apos;md&apos;,&apos;vc-md&apos;
         </info>
      </var>
      <var name="dt" type="REAL" >
         <default> 20.D0
         </default>
         <info>
time step for molecular dynamics, in Rydberg atomic units
(1 a.u.=4.8378 * 10^-17 s : beware, the CP code uses
 Hartree atomic units, half that much!!!)
         </info>
      </var>
      <var name="outdir" type="CHARACTER" >
         <default>
value of the ESPRESSO_TMPDIR environment variable if set;
current directory (&apos;./&apos;) otherwise
         </default>
         <info>
input, temporary, output files are found in this directory,
see also <ref>wfcdir</ref>
         </info>
      </var>
      <var name="wfcdir" type="CHARACTER" >
         <default> same as <ref>outdir</ref>
         </default>
         <info>
This directory specifies where to store files generated by
each processor (*.wfc{N}, *.igk{N}, etc.). Useful for
machines without a parallel file system: set <ref>wfcdir</ref> to
a local file system, while <ref>outdir</ref> should be a parallel
or network file system, visible to all processors. Beware:
in order to restart from interrupted runs, or to perform
further calculations using the produced data files, you
may need to copy files to <ref>outdir</ref>. Works only for pw.x.
         </info>
      </var>
      <var name="prefix" type="CHARACTER" >
         <default> &apos;pwscf&apos;
         </default>
         <info>
prepended to input/output filenames:
prefix.wfc, prefix.rho, etc.
         </info>
      </var>
      <var name="lkpoint_dir" type="LOGICAL" >
         <info>
OBSOLETE - NO LONGER IMPLEMENTED
         </info>
      </var>
      <var name="max_seconds" type="REAL" >
         <default> 1.D+7, or 150 days, i.e. no time limit
         </default>
         <info>
Jobs stops after <ref>max_seconds</ref> CPU time. Use this option
in conjunction with option <ref>restart_mode</ref> if you need to
split a job too long to complete into shorter jobs that
fit into your batch queues.
         </info>
      </var>
      <var name="etot_conv_thr" type="REAL" >
         <default> 1.0D-4
         </default>
         <info>
Convergence threshold on total energy (a.u) for ionic
minimization: the convergence criterion is satisfied
when the total energy changes less than <ref>etot_conv_thr</ref>
between two consecutive scf steps. Note that <ref>etot_conv_thr</ref>
is extensive, like the total energy.
See also <ref>forc_conv_thr</ref> - both criteria must be satisfied
         </info>
      </var>
      <var name="forc_conv_thr" type="REAL" >
         <default> 1.0D-3
         </default>
         <info>
Convergence threshold on forces (a.u) for ionic minimization:
the convergence criterion is satisfied when all components of
all forces are smaller than <ref>forc_conv_thr</ref>.
See also <ref>etot_conv_thr</ref> - both criteria must be satisfied
         </info>
      </var>
      <var name="disk_io" type="CHARACTER" >
         <default> see below
         </default>
         <options>
            <info>
Specifies the amount of disk I/O activity:
(only for binary files and xml data file in data directory;
other files printed at each molecular dynamics / structural
optimization step are not controlled by this option )
            </info>
            <opt val="'high'" >
save charge to disk at each SCF step,
keep wavefunctions on disk (in &quot;distributed&quot; format),
save mixing data as well.
Do not use this option unless you have a good reason!
It is no longer needed to specify &apos;high&apos; in order to be able
to restart from an interrupted calculation (see <ref>restart_mode</ref>)
            </opt>
            <opt val="'medium'" >
save charge to disk at each SCF step,
keep wavefunctions on disk only if more than one k-point,
per process is present, otherwise keep them in memory;
save them to disk only at the end (in &quot;portable&quot; format)
            </opt>
            <opt val="'low'" >
save charge to disk at each SCF step,
keep wavefunctions in memory (for all k-points),
save them to disk only at the end (in &quot;portable&quot; format).
Reduces I/O but increases memory wrt the previous cases
            </opt>
            <opt val="'nowf'" >
save to disk only the xml data file,
never save wavefunctions and charge density
            </opt>
            <opt val="'none'" >
do not save anything to disk
            </opt>
            <info>
<b>Default</b> is <b>&apos;low&apos;</b> for the scf case, <b>&apos;medium&apos;</b> otherwise.
Note that the needed RAM increases as disk I/O decreases
            </info>
         </options>
      </var>
      <var name="pseudo_dir" type="CHARACTER" >
         <default>
value of the $ESPRESSO_PSEUDO environment variable if set;
&apos;$HOME/espresso/pseudo/&apos; otherwise
         </default>
         <info>
directory containing pseudopotential files
         </info>
      </var>
      <var name="tefield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. a saw-like potential simulating an electric field
is added to the bare ionic potential. See variables <ref>edir</ref>,
<ref>eamp</ref>, <ref>emaxpos</ref>, <ref>eopreg</ref> for the form and size of
the added potential.
         </info>
      </var>
      <var name="dipfield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. and <ref>tefield</ref>==.TRUE. a dipole correction is also
added to the bare ionic potential - implements the recipe
of L. Bengtsson, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.59.12301">PRB 59, 12301 (1999)</a>. See variables <ref>edir</ref>,
<ref>emaxpos</ref>, <ref>eopreg</ref> for the form of the correction. Must
be used ONLY in a slab geometry, for surface calculations,
with the discontinuity FALLING IN THE EMPTY SPACE.
         </info>
      </var>
      <var name="lelfield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. a homogeneous finite electric field described
through the modern theory of the polarization is applied.
This is different from <ref>tefield</ref> == .true. !
         </info>
      </var>
      <var name="nberrycyc" type="INTEGER" >
         <default> 1
         </default>
         <info>
In the case of a finite electric field  ( <ref>lelfield</ref> == .TRUE. )
it defines the number of iterations for converging the
wavefunctions in the electric field Hamiltonian, for each
external iteration on the charge density
         </info>
      </var>
      <var name="lorbm" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If <b>.TRUE.</b> perform orbital magnetization calculation.
If finite electric field is applied (<ref>lelfield</ref>==.true.) only Kubo terms are computed
[for details see New J. Phys. 12, 053032 (2010), <a href="https://doi.org/10.1088/1367-2630/12/5/053032">doi:10.1088/1367-2630/12/5/053032</a>].

The type of calculation is <b>&apos;nscf&apos;</b> and should be performed on an automatically
generated uniform grid of k points.

Works ONLY with norm-conserving pseudopotentials.
         </info>
      </var>
      <var name="lberry" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. perform a Berry phase calculation.
See the header of PW/src/bp_c_phase.f90 for documentation.
         </info>
      </var>
      <var name="gdir" type="INTEGER" >
         <info>
For Berry phase calculation: direction of the k-point
strings in reciprocal space. Allowed values: 1, 2, 3
1=first, 2=second, 3=third reciprocal lattice vector
For calculations with finite electric fields
(<ref>lelfield</ref>==.true.) &quot;gdir&quot; is the direction of the field.
         </info>
      </var>
      <var name="nppstr" type="INTEGER" >
         <info>
For Berry phase calculation: number of k-points to be
calculated along each symmetry-reduced string.
The same for calculation with finite electric fields
(<ref>lelfield</ref>==.true.).
         </info>
      </var>
      <var name="gate" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <see> zgate, relaxz, block, block_1, block_2, block_height
         </see>
         <info>
In the case of charged cells (<ref>tot_charge</ref> .ne. 0) setting gate = .TRUE.
represents the counter charge (i.e. -tot_charge) not by a homogeneous
background charge but with a charged plate, which is placed at <ref>zgate</ref>
(see below). Details of the gate potential can be found in
T. Brumme, M. Calandra, F. Mauri; <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.245406">PRB 89, 245406 (2014)</a>.
Note, that in systems which are not symmetric with respect to the plate,
one needs to enable the dipole correction! (<ref>dipfield</ref>=.true.).
Currently, symmetry can be used with gate=.true. but carefully check
that no symmetry is included which maps <i>z</i> to -<i>z</i> even if in principle one
could still use them for symmetric systems (i.e. no dipole correction).
For <ref>nosym</ref>=.false. verbosity is set to &apos;high&apos;.
Note: this option was called &quot;monopole&quot; in v6.0 and 6.1 of pw.x
         </info>
      </var>
      <var name="twochem" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <see> nelec_cond, nbnd_cond, degauss_cond
         </see>
         <info>
IF .TRUE. , a two chemical potential calculation for the simulation of
photoexcited systems is performed, constraining a fraction of the
electrons in the conduction manifold.
See G. Marini, M. Calandra; <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.104.144103">PRB 104, 144103 (2021)</a>.
Note: requires <ref>occupations</ref> to be set to &apos;smearing&apos;.
         </info>
      </var>
      <var name="lfcp" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. perform a constant bias potential (constant-mu) calculation
for a system with ESM method. See the header of PW/src/fcp_module.f90
for documentation. To perform the calculation, you must set a namelist FCP.

NB:
- The total energy displayed in output includes the potentiostat
  contribution (-mu*N).
- <ref>calculation</ref> must be &apos;relax&apos; or &apos;md&apos;.
- <ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc2&apos; or &apos;bc3&apos; must be set
  in <ref>SYSTEM</ref> namelist.
- ESM-RISM is also supported (<ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc1&apos;
  and <ref>trism</ref> = .TRUE.).
- <ref>ignore_wolfe</ref> is always .TRUE., for BFGS.
         </info>
      </var>
      <var name="trism" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. perform a 3D-RISM-SCF calculation
[for details see H.Sato et al., JCP 112, 9463 (2000), <a href="https://doi.org/10.1063/1.481564">doi:10.1063/1.481564</a>].
The solvent&apos;s distributions are calculated by 3D-RISM,
though solute is treated as SCF. The charge density and
the atomic positions are optimized, simultaneously with
the solvents. To perform the calculation, you must set
a namelist <ref>RISM</ref> and a card <ref>SOLVENTS</ref>.

If <ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc1&apos;,
Laue-RISM is calculated instead of 3D-RISM
and coupled with ESM method (i.e. ESM-RISM).
[for details see S.Nishihara and M.Otani, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.96.115429">PRB 96, 115429 (2017)</a>].

The default of <ref>mixing_beta</ref> is 0.2
for both 3D-RISM and Laue-RISM.

For structural relaxation with BFGS,
<ref>ignore_wolfe</ref> is always .TRUE. .
         </info>
      </var>
   </namelist>
   <namelist name="SYSTEM" >
      <var name="ibrav" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
  Bravais-lattice index. Optional only if space_group is set.
  If ibrav /= 0, specify EITHER [ <ref>celldm</ref>(1)-<ref>celldm</ref>(6) ]
  OR [ <ref>A</ref>, <ref>B</ref>, <ref>C</ref>, <ref>cosAB</ref>, <ref>cosAC</ref>, <ref>cosBC</ref> ]
  but NOT both. The lattice parameter &quot;alat&quot; is set to
  alat = celldm(1) (in a.u.) or alat = A (in Angstrom);
  see below for the other parameters.
  For ibrav=0 specify the lattice vectors in <ref>CELL_PARAMETERS</ref>,
  optionally the lattice parameter alat = celldm(1) (in a.u.)
  or = A (in Angstrom). If not specified, the lattice parameter is
  taken from <ref>CELL_PARAMETERS</ref>
  IMPORTANT NOTICE 1:
  with ibrav=0 lattice vectors must be given with a sufficiently large
  number of digits and with the correct symmetry, or else symmetry
  detection may fail and strange problems may arise in symmetrization.
  IMPORTANT NOTICE 2:
  do not use celldm(1) or A as a.u. to Ang conversion factor,
  use the true lattice parameters or nothing,
  specify units in <ref>CELL_PARAMETERS</ref> and <ref>ATOMIC_POSITIONS</ref>

ibrav      structure                   celldm(2)-celldm(6)
                                     or: b,c,cosbc,cosac,cosab
  0          free
      crystal axis provided in input: see card <ref>CELL_PARAMETERS</ref>

  1          cubic P (sc)
      v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,1)

  2          cubic F (fcc)
      v1 = (a/2)(-1,0,1),  v2 = (a/2)(0,1,1), v3 = (a/2)(-1,1,0)

  3          cubic I (bcc)
      v1 = (a/2)(1,1,1),  v2 = (a/2)(-1,1,1),  v3 = (a/2)(-1,-1,1)
 -3          cubic I (bcc), more symmetric axis:
      v1 = (a/2)(-1,1,1), v2 = (a/2)(1,-1,1),  v3 = (a/2)(1,1,-1)

  4          Hexagonal and Trigonal P        celldm(3)=c/a
      v1 = a(1,0,0),  v2 = a(-1/2,sqrt(3)/2,0),  v3 = a(0,0,c/a)

  5          Trigonal R, 3fold axis c        celldm(4)=cos(gamma)
      The crystallographic vectors form a three-fold star around
      the z-axis, the primitive cell is a simple rhombohedron:
      v1 = a(tx,-ty,tz),   v2 = a(0,2ty,tz),   v3 = a(-tx,-ty,tz)
      where c=cos(gamma) is the cosine of the angle gamma between
      any pair of crystallographic vectors, tx, ty, tz are:
        tx=sqrt((1-c)/2), ty=sqrt((1-c)/6), tz=sqrt((1+2c)/3)
 -5          Trigonal R, 3fold axis &lt;111&gt;    celldm(4)=cos(gamma)
      The crystallographic vectors form a three-fold star around
      &lt;111&gt;. Defining a&apos; = a/sqrt(3) :
      v1 = a&apos; (u,v,v),   v2 = a&apos; (v,u,v),   v3 = a&apos; (v,v,u)
      where u and v are defined as
        u = tz - 2*sqrt(2)*ty,  v = tz + sqrt(2)*ty
      and tx, ty, tz as for case ibrav=5
      Note: if you prefer x,y,z as axis in the cubic limit,
            set  u = tz + 2*sqrt(2)*ty,  v = tz - sqrt(2)*ty
            See also the note in Modules/latgen.f90

  6          Tetragonal P (st)               celldm(3)=c/a
      v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,c/a)

  7          Tetragonal I (bct)              celldm(3)=c/a
      v1=(a/2)(1,-1,c/a),  v2=(a/2)(1,1,c/a),  v3=(a/2)(-1,-1,c/a)

  8          Orthorhombic P                  celldm(2)=b/a
                                             celldm(3)=c/a
      v1 = (a,0,0),  v2 = (0,b,0), v3 = (0,0,c)

  9          Orthorhombic base-centered(bco) celldm(2)=b/a
                                             celldm(3)=c/a
      v1 = (a/2, b/2,0),  v2 = (-a/2,b/2,0),  v3 = (0,0,c)
 -9          as 9, alternate description
      v1 = (a/2,-b/2,0),  v2 = (a/2, b/2,0),  v3 = (0,0,c)
 91          Orthorhombic one-face base-centered A-type
                                             celldm(2)=b/a
                                             celldm(3)=c/a
      v1 = (a, 0, 0),  v2 = (0,b/2,-c/2),  v3 = (0,b/2,c/2)

 10          Orthorhombic face-centered      celldm(2)=b/a
                                             celldm(3)=c/a
      v1 = (a/2,0,c/2),  v2 = (a/2,b/2,0),  v3 = (0,b/2,c/2)

 11          Orthorhombic body-centered      celldm(2)=b/a
                                             celldm(3)=c/a
      v1=(a/2,b/2,c/2),  v2=(-a/2,b/2,c/2),  v3=(-a/2,-b/2,c/2)

 12          Monoclinic P, unique axis c     celldm(2)=b/a
                                             celldm(3)=c/a,
                                             celldm(4)=cos(ab)
      v1=(a,0,0), v2=(b*cos(gamma),b*sin(gamma),0),  v3 = (0,0,c)
      where gamma is the angle between axis a and b.
-12          Monoclinic P, unique axis b     celldm(2)=b/a
                                             celldm(3)=c/a,
                                             celldm(5)=cos(ac)
      v1 = (a,0,0), v2 = (0,b,0), v3 = (c*cos(beta),0,c*sin(beta))
      where beta is the angle between axis a and c

 13          Monoclinic base-centered        celldm(2)=b/a
             (unique axis c)                 celldm(3)=c/a,
                                             celldm(4)=cos(gamma)
      v1 = (  a/2,         0,          -c/2),
      v2 = (b*cos(gamma), b*sin(gamma), 0  ),
      v3 = (  a/2,         0,           c/2),
      where gamma=angle between axis a and b projected on xy plane

-13          Monoclinic base-centered        celldm(2)=b/a
             (unique axis b)                 celldm(3)=c/a,
                                             celldm(5)=cos(beta)
      v1 = (  a/2,       b/2,             0),
      v2 = ( -a/2,       b/2,             0),
      v3 = (c*cos(beta),   0,   c*sin(beta)),
      where beta=angle between axis a and c projected on xz plane
 IMPORTANT NOTICE: until QE v.6.4.1, axis for ibrav=-13 had a
 different definition: v1(old) =-v2(now), v2(old) = v1(now)

 14          Triclinic                       celldm(2)= b/a,
                                             celldm(3)= c/a,
                                             celldm(4)= cos(bc),
                                             celldm(5)= cos(ac),
                                             celldm(6)= cos(ab)
      v1 = (a, 0, 0),
      v2 = (b*cos(gamma), b*sin(gamma), 0)
      v3 = (c*cos(beta),  c*(cos(alpha)-cos(beta)cos(gamma))/sin(gamma),
           c*sqrt( 1 + 2*cos(alpha)cos(beta)cos(gamma)
                     - cos(alpha)^2-cos(beta)^2-cos(gamma)^2 )/sin(gamma) )
      where alpha is the angle between axis b and c
             beta is the angle between axis a and c
            gamma is the angle between axis a and b
         </info>
      </var>
      <group>
         <label> Either:
         </label>
         <dimension name="celldm" start="1" end="6" type="REAL" >
            <see> ibrav
            </see>
            <info>
Crystallographic constants - see the <ref>ibrav</ref> variable.
Specify either these OR <ref>A</ref>,<ref>B</ref>,<ref>C</ref>,<ref>cosAB</ref>,<ref>cosBC</ref>,<ref>cosAC</ref> NOT both.
Only needed values (depending on &quot;ibrav&quot;) must be specified
alat = <ref>celldm</ref>(1) is the lattice parameter &quot;a&quot; (in BOHR)
If <ref>ibrav</ref>==0, only <ref>celldm</ref>(1) is used if present;
cell vectors are read from card <ref>CELL_PARAMETERS</ref>
            </info>
         </dimension>
         <label> Or:
         </label>
         <vargroup type="REAL" >
            <var name="A" >
            </var>
            <var name="B" >
            </var>
            <var name="C" >
            </var>
            <var name="cosAB" >
            </var>
            <var name="cosAC" >
            </var>
            <var name="cosBC" >
            </var>
            <see> ibrav
            </see>
            <info>
Traditional crystallographic constants:

  a,b,c in ANGSTROM
  cosAB = cosine of the angle between axis a and b (gamma)
  cosAC = cosine of the angle between axis a and c (beta)
  cosBC = cosine of the angle between axis b and c (alpha)

The axis are chosen according to the value of <ref>ibrav</ref>.
Specify either these OR <ref>celldm</ref> but NOT both.
Only needed values (depending on <ref>ibrav</ref>) must be specified.

The lattice parameter alat = A (in ANGSTROM ).

If <ref>ibrav</ref> == 0, only A is used if present, and
cell vectors are read from card <ref>CELL_PARAMETERS</ref>.
            </info>
         </vargroup>
      </group>
      <var name="nat" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
number of atoms in the unit cell (ALL atoms, except if
space_group is set, in which case, INEQUIVALENT atoms)
         </info>
      </var>
      <var name="ntyp" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
number of types of atoms in the unit cell
         </info>
      </var>
      <var name="nbnd" type="INTEGER" >
         <default>
for an insulator, <ref>nbnd</ref> = number of valence bands
(<ref>nbnd</ref> = # of electrons /2);
<br/> for a metal, 20% more (minimum 4 more)
         </default>
         <info>
Number of electronic states (bands) to be calculated.
Note that in spin-polarized calculations the number of
k-point, not the number of bands per k-point, is doubled
         </info>
      </var>
      <var name="nbnd_cond" type="INTEGER" >
         <default>
nbnd_cond = <ref>nbnd</ref> - # of electrons / 2 in the collinear case;
                     nbnd_cond = <ref>nbnd</ref> - # of electrons in the noncollinear case.
         </default>
         <info>
Number of electronic states in the conduction manifold
for a two chemical-potential calculation (<ref>twochem</ref>=.true.).
         </info>
      </var>
      <var name="tot_charge" type="REAL" >
         <default> 0.0
         </default>
         <info>
Total charge of the system. Useful for simulations with charged cells.
By default the unit cell is assumed to be neutral (tot_charge=0).
tot_charge=+1 means one electron missing from the system,
tot_charge=-1 means one additional electron, and so on.

In a periodic calculation a compensating jellium background is
inserted to remove divergences if the cell is not neutral.
         </info>
      </var>
      <dimension name="starting_charge" start="1" end="ntyp" type="REAL" >
         <default> 0.0
         </default>
         <info>
starting charge on atomic type &apos;i&apos;,
to create starting potential with <ref>startingpot</ref> = &apos;atomic&apos;.
         </info>
      </dimension>
      <var name="tot_magnetization" type="REAL" >
         <default> -10000 [unspecified]
         </default>
         <info>
Total majority spin charge - minority spin charge.
Used to impose a specific total electronic magnetization.
If unspecified then tot_magnetization variable is ignored and
the amount of electronic magnetization is determined during
the self-consistent cycle.
         </info>
      </var>
      <dimension name="starting_magnetization" start="1" end="ntyp" type="REAL" >
         <default> 0
         </default>
         <info>
Starting spin polarization on atomic type &apos;i&apos; in a spin
polarized (LSDA or noncollinear/spin-orbit) calculation.
For non-constrained calculations, the allowed values
range between -1 (all spins down for the valence electrons
of atom type &apos;i&apos;) to 1 (all spins up).
If you expect a nonzero magnetization in your ground state,
you MUST either specify a nonzero value for at least one
atomic type, or constrain the magnetization using variable
<ref>tot_magnetization</ref> for LSDA, <ref>constrained_magnetization</ref>
for noncollinear/spin-orbit calculations. If you don&apos;t,
you will get a nonmagnetic (zero magnetization) state.
In order to perform LSDA calculations for an antiferromagnetic
state, define two different atomic species corresponding to
sublattices of the same atomic type.

<b>NOTE 1:</b> <ref>starting_magnetization</ref> is ignored in most BUT NOT ALL
cases in non-scf calculations: it is safe to keep the same
values for the scf and subsequent non-scf calculation.

<b>NOTE 2:</b> If you fix the magnetization with
<ref>tot_magnetization</ref>, do not specify <ref>starting_magnetization</ref>.

<b>NOTE 3:</b> In the noncollinear/spin-orbit case, starting with zero
starting_magnetization on all atoms imposes time reversal
symmetry. The magnetization is never calculated and is
set to zero (the internal variable domag is set to .FALSE.).
         </info>
      </dimension>
      <var name="ecutwfc" type="REAL" >
         <status> REQUIRED
         </status>
         <info>
kinetic energy cutoff (Ry) for wavefunctions
         </info>
      </var>
      <var name="ecutrho" type="REAL" >
         <default> 4 * <ref>ecutwfc</ref>
         </default>
         <info>
Kinetic energy cutoff (Ry) for charge density and potential
For norm-conserving pseudopotential you should stick to the
default value, you can reduce it by a little but it will
introduce noise especially on forces and stress.
If there are ultrasoft PP, a larger value than the default is
often desirable (ecutrho = 8 to 12 times <ref>ecutwfc</ref>, typically).
PAW datasets can often be used at 4*<ref>ecutwfc</ref>, but it depends
on the shape of augmentation charge: testing is mandatory.
The use of gradient-corrected functional, especially in cells
with vacuum, or for pseudopotential without non-linear core
correction, usually requires an higher values of ecutrho
to be accurately converged.
         </info>
      </var>
      <var name="ecutfock" type="REAL" >
         <default> ecutrho
         </default>
         <info>
Kinetic energy cutoff (Ry) for the exact exchange operator in
EXX type calculations. By default this is the same as <ref>ecutrho</ref>
but in some EXX calculations, a significant speed-up can be obtained
by reducing ecutfock, at the expense of some loss in accuracy.
Must be .gt. <ref>ecutwfc</ref>. Not implemented for stress calculation
and for US-PP and PAW pseudopotentials.
Use with care, especially in metals where it may give raise
to instabilities.
         </info>
      </var>
      <vargroup type="INTEGER" >
         <var name="nr1" >
         </var>
         <var name="nr2" >
         </var>
         <var name="nr3" >
         </var>
         <info>
Three-dimensional FFT mesh (hard grid) for charge
density (and scf potential). If not specified
the grid is calculated based on the cutoff for
charge density (see also <ref>ecutrho</ref>)
Note: you must specify all three dimensions for this setting to
be used.
         </info>
      </vargroup>
      <vargroup type="INTEGER" >
         <var name="nr1s" >
         </var>
         <var name="nr2s" >
         </var>
         <var name="nr3s" >
         </var>
         <info>
Three-dimensional mesh for wavefunction FFT and for the smooth
part of charge density ( smooth grid ).
Coincides with <ref>nr1</ref>, <ref>nr2</ref>, <ref>nr3</ref> if <ref>ecutrho</ref> = 4 * ecutwfc ( default )
Note: you must specify all three dimensions for this setting to
be used.
         </info>
      </vargroup>
      <var name="nosym" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) symmetry is not used. Consequences:

- if a list of k points is provided in input, it is used
  &quot;as is&quot;: symmetry-inequivalent k-points are not generated,
  and the charge density is not symmetrized;

- if a uniform (Monkhorst-Pack) k-point grid is provided in
  input, it is expanded to cover the entire Brillouin Zone,
  irrespective of the crystal symmetry.
  Time reversal symmetry is assumed so k and -k are considered
  as equivalent unless <ref>noinv</ref>=.true. is specified.

Do not use this option unless you know exactly what you want
and what you get. May be useful in the following cases:
- in low-symmetry large cells, if you cannot afford a k-point
  grid with the correct symmetry
- in MD simulations
- in calculations for isolated atoms
         </info>
      </var>
      <var name="nosym_evc" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) symmetry is not used, and k points are
forced to have the symmetry of the Bravais lattice;
an automatically generated Monkhorst-Pack grid will contain
all points of the grid over the entire Brillouin Zone,
plus the points rotated by the symmetries of the Bravais
lattice which were not in the original grid. The same
applies if a k-point list is provided in input instead
of a Monkhorst-Pack grid. Time reversal symmetry is assumed
so k and -k are equivalent unless <ref>noinv</ref>=.true. is specified.
This option differs from <ref>nosym</ref> because it forces k-points
in all cases to have the full symmetry of the Bravais lattice
(not all uniform grids have such property!)
         </info>
      </var>
      <var name="noinv" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) disable the usage of k =&gt; -k symmetry
(time reversal) in k-point generation
         </info>
      </var>
      <var name="no_t_rev" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) disable the usage of magnetic symmetry operations
that consist in a rotation + time reversal.
         </info>
      </var>
      <var name="force_symmorphic" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) force the symmetry group to be symmorphic by disabling
symmetry operations having an associated fractionary translation
         </info>
      </var>
      <var name="use_all_frac" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.FALSE.) force real-space FFT grids to be commensurate with
fractionary translations of non-symmorphic symmetry operations,
if present (e.g.: if a fractional translation (0,0,c/4) exists,
the FFT dimension along the c axis must be multiple of 4).
if (.TRUE.) do not impose any constraints to FFT grids, even in
the presence of non-symmorphic symmetry operations.
BEWARE: use_all_frac=.TRUE. may lead to wrong results for
hybrid functionals and phonon calculations. Both cases use
symmetrization in real space that works for non-symmorphic
operations only if the real-space FFT grids are commensurate.
         </info>
      </var>
      <var name="occupations" type="CHARACTER" >
         <options>
            <info> Available options are:
            </info>
            <opt val="'smearing'" >
gaussian smearing for metals;
see variables <ref>smearing</ref> and <ref>degauss</ref>
            </opt>
            <opt val="'tetrahedra'" >
Tetrahedron method, Bloechl&apos;s version:
P.E. Bloechl, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.49.16223">PRB 49, 16223 (1994)</a>
Requires uniform grid of k-points, to be
automatically generated (see card <ref>K_POINTS</ref>).
Well suited for calculation of DOS,
less so (because not variational) for
force/optimization/dynamics calculations.
            </opt>
            <opt val="'tetrahedra_lin'" >
Original linear tetrahedron method.
To be used only as a reference;
the optimized tetrahedron method is more efficient.
            </opt>
            <opt val="'tetrahedra_opt'" >
Optimized tetrahedron method:
see M. Kawamura, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.094515">PRB 89, 094515 (2014)</a>.
Can be used for phonon calculations as well.
            </opt>
            <opt val="'fixed'" >
for insulators with a gap
            </opt>
            <opt val="'from_input'" >
The occupation are read from input file,
card <ref>OCCUPATIONS</ref>. Option valid only for a
single k-point, requires <ref>nbnd</ref> to be set
in input. Occupations should be consistent
with the value of <ref>tot_charge</ref>.
            </opt>
         </options>
      </var>
      <var name="one_atom_occupations" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
This flag is used for isolated atoms (<ref>nat</ref>=1) together with
<ref>occupations</ref>=&apos;from_input&apos;. If it is .TRUE., the wavefunctions
are ordered as the atomic starting wavefunctions, independently
from their eigenvalue. The occupations indicate which atomic
states are filled.

The order of the states is written inside the UPF pseudopotential file.
In the scalar relativistic case:
S -&gt; l=0, m=0
P -&gt; l=1, z, x, y
D -&gt; l=2, r^2-3z^2, xz, yz, xy, x^2-y^2

In the noncollinear magnetic case (with or without spin-orbit),
each group of states is doubled. For instance:
P -&gt; l=1, z, x, y for spin up, l=1, z, x, y for spin down.
Up and down is relative to the direction of the starting
magnetization.

In the case with spin-orbit and time-reversal
(<ref>starting_magnetization</ref>=0.0) the atomic wavefunctions are
radial functions multiplied by spin-angle functions.
For instance:
P -&gt; l=1, j=1/2, m_j=-1/2,1/2. l=1, j=3/2,
     m_j=-3/2, -1/2, 1/2, 3/2.

In the magnetic case with spin-orbit the atomic wavefunctions
can be forced to be spin-angle functions by setting
<ref>starting_spin_angle</ref> to .TRUE..
         </info>
      </var>
      <var name="starting_spin_angle" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
In the spin-orbit case when <ref>domag</ref>=.TRUE., by default,
the starting wavefunctions are initialized as in scalar
relativistic noncollinear case without spin-orbit.

By setting <ref>starting_spin_angle</ref>=.TRUE. this behaviour can
be changed and the initial wavefunctions are radial
functions multiplied by spin-angle functions.

When <ref>domag</ref>=.FALSE. the initial wavefunctions are always
radial functions multiplied by spin-angle functions
independently from this flag.

When <ref>lspinorb</ref> is .FALSE. this flag is not used.
         </info>
      </var>
      <var name="degauss_cond" type="REAL" >
         <default> 0.D0 Ry
         </default>
         <info>
value of the gaussian spreading (Ry) for brillouin-zone
integration in the conduction manifold in a two-chemical
potential calculation (<ref>twochem</ref>=.true.).
         </info>
      </var>
      <var name="nelec_cond" type="REAL" >
         <default> 0.D0
         </default>
         <info>
Number of electrons placed in the conduction manifold in a two-chemical
potential calculation (<ref>twochem</ref>=.true.). Of the total # of
electrons nelec, nelec-nelec_cond will occupy the valence
manifold and nelec_cond will be constrained in the conduction manifold.
         </info>
      </var>
      <var name="degauss" type="REAL" >
         <default> 0.D0 Ry
         </default>
         <info>
value of the gaussian spreading (Ry) for brillouin-zone
integration in metals.
         </info>
      </var>
      <var name="smearing" type="CHARACTER" >
         <default> &apos;gaussian&apos;
         </default>
         <options>
            <info>
Available options are:
            </info>
            <opt val="'gaussian', 'gauss'" >
ordinary Gaussian spreading (Default)
            </opt>
            <opt val="'methfessel-paxton', 'm-p', 'mp'" >
Methfessel-Paxton first-order spreading
(see <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.40.3616">PRB 40, 3616 (1989)</a>).
            </opt>
            <opt val="'marzari-vanderbilt', 'cold', 'm-v', 'mv'" >
Marzari-Vanderbilt-DeVita-Payne cold smearing
(see <a href="https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.82.3296">PRL 82, 3296 (1999)</a>)
            </opt>
            <opt val="'fermi-dirac', 'f-d', 'fd'" >
smearing with Fermi-Dirac function
            </opt>
         </options>
      </var>
      <var name="nspin" type="INTEGER" >
         <default> 1
         </default>
         <info>
nspin = 1 :  non-polarized calculation (default)

nspin = 2 :  spin-polarized calculation, LSDA
             (magnetization along z axis)

nspin = 4 :  spin-polarized calculation, noncollinear
             (magnetization in generic direction)
             DO NOT specify <ref>nspin</ref> in this case;
             specify <ref>noncolin</ref>=.TRUE. instead
         </info>
      </var>
      <var name="sic_gamma" type="REAL" >
         <default> 0
         </default>
         <info>
Strength of the gammaDFT potential.
         </info>
      </var>
      <var name="pol_type" type="CHARACTER" >
         <options>
            <info>
Type of polaron in gammaDFT.
            </info>
            <opt val="'e'" > electron polaron
            </opt>
            <opt val="'h'" > hole polaron
            </opt>
         </options>
      </var>
      <var name="sic_energy" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
Enable the calculation of the total energy in gammaDFT. When .true.,
a preliminary calculation is performed to calculate the electron density
in the absence of the polaron. When .false., the total energy printed in
output should not be considered. For structural relaxations, it is
recommended to use .false. to avoid doubling the computational cost.
         </info>
      </var>
      <var name="sci_vb" type="REAL" >
         <default> 0
         </default>
         <info>
Valence band shift (in eV) through self-consistent
scissor operator. When performing gammaDFT calculations
of polarons, the polaron level is not shifted.
         </info>
      </var>
      <var name="sci_cb" type="REAL" >
         <default> 0
         </default>
         <info>
Conduction band band shift (in eV) through self-consistent
scissor operator. When performing gammaDFT calculations
of polarons, the polaron level is not shifted.
         </info>
      </var>
      <var name="noncolin" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
if .true. the program will perform a noncollinear calculation.
         </info>
      </var>
      <var name="ecfixed" type="REAL" >
         <default> 0.0
         </default>
         <see> q2sigma
         </see>
      </var>
      <var name="qcutz" type="REAL" >
         <default> 0.0
         </default>
         <see> q2sigma
         </see>
      </var>
      <var name="q2sigma" type="REAL" >
         <default> 0.1
         </default>
         <info>
ecfixed, qcutz, q2sigma:  parameters for modified functional to be
used in variable-cell molecular dynamics (or in stress calculation).
&quot;ecfixed&quot; is the value (in Rydberg) of the constant-cutoff;
&quot;qcutz&quot; and &quot;q2sigma&quot; are the height and the width (in Rydberg)
of the energy step for reciprocal vectors whose square modulus
is greater than &quot;ecfixed&quot;. In the kinetic energy, G^2 is
replaced by G^2 + qcutz * (1 + erf ( (G^2 - ecfixed)/q2sigma) )
See: M. Bernasconi et al, J. Phys. Chem. Solids 56, 501 (1995),
<a href="https://doi.org/10.1016/0022-3697(94)00228-2">doi:10.1016/0022-3697(94)00228-2</a>
         </info>
      </var>
      <var name="input_dft" type="CHARACTER" >
         <default> read from pseudopotential files
         </default>
         <info>
Exchange-correlation functional: eg &apos;PBE&apos;, &apos;BLYP&apos; etc
See Modules/funct.f90 for allowed values.
Overrides the value read from pseudopotential files.
Use with care and if you know what you are doing!
         </info>
      </var>
      <var name="ace" type="LOGICAL" >
         <default> true
         </default>
         <info>
Use Adaptively Compressed Exchange operator as in
Lin Lin, J. Chem. Theory Comput. 2016, 12, 2242--2249, <a href="https://doi.org/10.1021/acs.jctc.6b00092">doi:10.1021/acs.jctc.6b00092</a>

Set to false to use standard Exchange (much slower)
         </info>
      </var>
      <var name="exx_fraction" type="REAL" >
         <default> it depends on the specified functional
         </default>
         <info>
Fraction of EXX for hybrid functional calculations. In the case of
<ref>input_dft</ref>=&apos;PBE0&apos;, the default value is 0.25, while for <ref>input_dft</ref>=&apos;B3LYP&apos;
the <ref>exx_fraction</ref> default value is 0.20.
         </info>
      </var>
      <var name="screening_parameter" type="REAL" >
         <default> 0.106
         </default>
         <info>
screening_parameter for HSE like hybrid functionals.
For more information, see:
J. Chem. Phys. 118, 8207 (2003), <a href="https://doi.org/10.1063/1.1564060">doi:10.1063/1.1564060</a>
J. Chem. Phys. 124, 219906 (2006), <a href="https://doi.org/10.1063/1.2204597">doi:10.1063/1.2204597</a>
         </info>
      </var>
      <var name="exxdiv_treatment" type="CHARACTER" >
         <default> &apos;gygi-baldereschi&apos;
         </default>
         <options>
            <info>
Specific for EXX. It selects the kind of approach to be used
for treating the Coulomb potential divergencies at small q vectors.
            </info>
            <opt val="'gygi-baldereschi'" > appropriate for cubic and quasi-cubic supercells
            </opt>
            <opt val="'vcut_spherical'" > appropriate for cubic and quasi-cubic supercells
            </opt>
            <opt val="'vcut_ws'" > appropriate for strongly anisotropic supercells, see also <ref>ecutvcut</ref>.
            </opt>
            <opt val="'none'" > sets Coulomb potential at G,q=0 to 0.0 (required for GAU-PBE)
            </opt>
         </options>
      </var>
      <var name="x_gamma_extrapolation" type="LOGICAL" >
         <default> .true.
         </default>
         <info>
Specific for EXX. If .true., extrapolate the G=0 term of the
potential (see README in examples/EXX_example for more)
Set this to .false. for GAU-PBE.
         </info>
      </var>
      <var name="ecutvcut" type="REAL" >
         <default> 0.0 Ry
         </default>
         <see> exxdiv_treatment
         </see>
         <info>
Reciprocal space cutoff for correcting Coulomb potential
divergencies at small q vectors.
         </info>
      </var>
      <vargroup type="INTEGER" >
         <var name="nqx1" >
         </var>
         <var name="nqx2" >
         </var>
         <var name="nqx3" >
         </var>
         <info>
Three-dimensional mesh for q (k1-k2) sampling of
the Fock operator (EXX). Can be smaller than
the number of k-points.

Currently this defaults to the size of the k-point mesh used.
In QE =&lt; 5.0.2 it defaulted to nqx1=nqx2=nqx3=1.
         </info>
      </vargroup>
      <var name="localization_thr" type="REAL" >
         <default> 0.0
         </default>
         <info>
Overlap threshold over which the exchange integral over a pair of localized orbitals
is included in the evaluation of EXX operator. Any value greater than 0.0 triggers
the SCDM localization and the evaluation on EXX using the localized orbitals.
Very small value of the threshold should yield the same result as the default EXX
evaluation
         </info>
      </var>
      <multidimension name="Hubbard_occ" start="1,1" end="ntyp,3" indexes="ityp,i" type="REAL" >
         <default> read from pseudopotentials
         </default>
         <info>
Hubbard occupations is the number of electrons in the
Hubbard manifold. By default they are initialized by
reading the occupations from pseudopotentials. If specified
from the input, then the values read from the pseudopotentials
will be overwritten.
The second index of the Hubbard_occ array corresponds to the
Hubbard manifold number. It is possible to specify up to
three Hubbard manifolds per Hubbard atom. However, if you want
to specify three manifolds then the second and the third manifolds
will be considered as one effective manifold (see Doc/Hubbard_input.pdf)

Note: Hubbard_occ cannot be used together with fully-relativistic pseudopotentials
(i.e. when noncolin=.true. and lspinorb=.true.) since this variable does not
allow to distinguish between the occupied and unoccupied channels (this is
needed when determining the atomic orbital offsets).
         </info>
      </multidimension>
      <dimension name="Hubbard_alpha" start="1" end="ntyp" type="REAL" >
         <default> 0.D0 for all species
         </default>
         <info>
Hubbard_alpha(i) is the perturbation (on atom i, in eV)
used to compute U (and V) with the linear-response method of
Cococcioni and de Gironcoli, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.71.035105">PRB 71, 035105 (2005)</a>
(only for DFT+U or DFT+U+V).

Note: Hubbard U and V can be computed using the HP code
which is based on density-functional perturbation theory,
and it gives exactly the same result as the method of
Cococcioni and de Gironcoli.
         </info>
      </dimension>
      <dimension name="Hubbard_beta" start="1" end="ntyp" type="REAL" >
         <default> 0.D0 for all species
         </default>
         <info>
Hubbard_beta(i) is the perturbation (on atom i, in eV)
used to compute J0 with the linear-response method of
Cococcioni and de Gironcoli, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.71.035105">PRB 71, 035105 (2005)</a>
(only for DFT+U or DFT+U+V). See also
<a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.84.115108">PRB 84, 115108 (2011)</a>.
         </info>
      </dimension>
      <multidimension name="starting_ns_eigenvalue" indexes="m,ispin,ityp" start="1,1,1" end="2*lmax+1,nspin or npol,ntyp" type="REAL" >
         <default> -1.d0 that means NOT SET
         </default>
         <info>
In the first iteration of an DFT+U run it overwrites
the m-th eigenvalue of the ns occupation matrix for the
ispin component of atomic species ityp.
For the noncollinear case, the ispin index runs up to npol=2
The value lmax  is given by the maximum angular momentum
number to which the Hubbard U is applied.
Leave unchanged eigenvalues that are not set.
This is useful to suggest the desired orbital occupations
when the default choice takes another path.
         </info>
      </multidimension>
      <var name="dmft" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <status>
Requires compilation with hdf5 support
         </status>
         <info>
If true, nscf calculation will exit in restart mode, scf calculation
will restart from there if DMFT updates are provided as hdf5 archive.
Scf calculation should be used only with <ref>electron_maxstep</ref> = 1.
<ref>K_POINTS</ref> have to be identical and given explicitly with <ref>nosym</ref>.
         </info>
      </var>
      <var name="dmft_prefix" type="CHARACTER" >
         <default> <ref>prefix</ref>
         </default>
         <info>
prepended to hdf5 archive: dmft_prefix.h5

DMFT update should be provided in group/dataset as:
- dft_misc_input/band_window with dimension [1, number of k-points, 2 (real + complex)]
- dft_update/delta_N with dimension [number of k-points, number of correlated orbitals,
number of correlated orbitals, 2 (real + complex)]
         </info>
      </var>
      <var name="ensemble_energies" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
If <ref>ensemble_energies</ref> = .true., an ensemble of xc energies
is calculated non-selfconsistently for perturbed
exchange-enhancement factors and LDA vs. PBE correlation
ratios after each converged electronic ground state
calculation.

Ensemble energies can be analyzed with the &apos;bee&apos; utility
included with libbeef.

Requires linking against libbeef.
<ref>input_dft</ref> must be set to a BEEF-type functional
(e.g. input_dft = &apos;BEEF-vdW&apos;)
         </info>
      </var>
      <var name="edir" type="INTEGER" >
         <info>
The direction of the electric field or dipole correction is
parallel to the bg(:,edir) reciprocal lattice vector, so the
potential is constant in planes defined by FFT grid points;
<ref>edir</ref> = 1, 2 or 3. Used only if <ref>tefield</ref> is .TRUE.
         </info>
      </var>
      <var name="emaxpos" type="REAL" >
         <default> 0.5D0
         </default>
         <info>
Position of the maximum of the saw-like potential along crystal
axis <ref>edir</ref>, within the  unit cell (see below), 0 &lt; emaxpos &lt; 1
Used only if <ref>tefield</ref> is .TRUE.
         </info>
      </var>
      <var name="eopreg" type="REAL" >
         <default> 0.1D0
         </default>
         <info>
Zone in the unit cell where the saw-like potential decreases.
( see below, 0 &lt; eopreg &lt; 1 ). Used only if <ref>tefield</ref> is .TRUE.
         </info>
      </var>
      <var name="eamp" type="REAL" >
         <default> 0.001 a.u.
         </default>
         <info>
Amplitude of the electric field, in ***Hartree*** a.u.;
1 a.u. = 51.4220632*10^10 V/m. Used only if <ref>tefield</ref>==.TRUE.
The saw-like potential increases with slope <ref>eamp</ref> in the
region from (<ref>emaxpos</ref>+<ref>eopreg</ref>-1) to (<ref>emaxpos</ref>), then decreases
to 0 until (<ref>emaxpos</ref>+<ref>eopreg</ref>), in units of the crystal
vector <ref>edir</ref>. Important: the change of slope of this
potential must be located in the empty region, or else
unphysical forces will result.
         </info>
      </var>
      <dimension name="angle1" start="1" end="ntyp" type="REAL" >
         <info>
The angle expressed in degrees between the initial
magnetization and the z-axis. For noncollinear calculations
only; index i runs over the atom types.
         </info>
      </dimension>
      <dimension name="angle2" start="1" end="ntyp" type="REAL" >
         <info>
The angle expressed in degrees between the projection
of the initial magnetization on x-y plane and the x-axis.
For noncollinear calculations only.
         </info>
      </dimension>
      <var name="lforcet" type="LOGICAL" >
         <info>
When starting a non collinear calculation using an existing density
file from a collinear lsda calculation assumes previous density points in
<i>z</i> direction and rotates it in the direction described by <ref>angle1</ref> and
<ref>angle2</ref> variables for atomic type 1
         </info>
      </var>
      <var name="constrained_magnetization" type="CHARACTER" >
         <see> lambda, fixed_magnetization
         </see>
         <default> &apos;none&apos;
         </default>
         <options>
            <info>
Used to perform constrained calculations in magnetic systems.
Currently available choices:
            </info>
            <opt val="'none'" >
no constraint
            </opt>
            <opt val="'total'" >
total magnetization is constrained by
adding a penalty functional to the total energy:

LAMBDA * SUM_{i} ( magnetization(i) - fixed_magnetization(i) )**2

where the sum over i runs over the three components of
the magnetization. Lambda is a real number (see below).
Noncolinear case only. Use <ref>tot_magnetization</ref> for LSDA
            </opt>
            <opt val="'atomic'" >
atomic magnetization are constrained to the defined
starting magnetization adding a penalty:

LAMBDA * SUM_{i,itype} ( magnetic_moment(i,itype) - mcons(i,itype) )**2

where i runs over the cartesian components (or just z
in the collinear case) and itype over the types (1-ntype).
mcons(:,:) array is defined from starting_magnetization,
(also from angle1, angle2 in the noncollinear case).
lambda is a real number
            </opt>
            <opt val="'total direction'" >
the angle theta of the total magnetization
with the z axis (theta = fixed_magnetization(3))
is constrained:

LAMBDA * ( arccos(magnetization(3)/mag_tot) - theta )**2

where mag_tot is the modulus of the total magnetization.
            </opt>
            <opt val="'atomic direction'" >
not all the components of the atomic
magnetic moment are constrained but only the cosine
of angle1, and the penalty functional is:

LAMBDA * SUM_{itype} ( mag_mom(3,itype)/mag_mom_tot - cos(angle1(ityp)) )**2
            </opt>
            <info>
N.B.: symmetrization may prevent to reach the desired orientation
of the magnetization. Try not to start with very highly symmetric
configurations or use the nosym flag (only as a last remedy)
            </info>
         </options>
      </var>
      <dimension name="fixed_magnetization" start="1" end="3" type="REAL" >
         <see> constrained_magnetization
         </see>
         <default> 0.d0
         </default>
         <info>
total magnetization vector (x,y,z components) to be kept
fixed when <ref>constrained_magnetization</ref>==&apos;total&apos;
         </info>
      </dimension>
      <var name="lambda" type="REAL" >
         <see> constrained_magnetization
         </see>
         <default> 1.d0
         </default>
         <info>
parameter used for constrained_magnetization calculations
N.B.: if the scf calculation does not converge, try to reduce lambda
      to obtain convergence, then restart the run with a larger lambda
         </info>
      </var>
      <var name="report" type="INTEGER" >
         <default> -1
         </default>
         <info>
determines when atomic magnetic moments are printed on output:
<b>report = 0</b>  never
<b>report =-1</b>  at the beginning of the scf and at convergence
<b>report = N</b>  as -1, plus every N scf iterations
         </info>
      </var>
      <var name="lspinorb" type="LOGICAL" >
         <info>
if .TRUE. the noncollinear code can use a pseudopotential with
spin-orbit.
         </info>
      </var>
      <var name="assume_isolated" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <options>
            <info>
Used to perform calculation assuming the system to be
isolated (a molecule or a cluster in a 3D supercell).

Currently available choices:
            </info>
            <opt val="'none'" >
(default): regular periodic calculation w/o any correction.
            </opt>
            <opt val="'makov-payne', 'm-p', 'mp'" >
the Makov-Payne correction to the
total energy is computed. An estimate of the vacuum
level is also calculated so that eigenvalues can be
properly aligned. ONLY FOR CUBIC SYSTEMS (<ref>ibrav</ref>=1,2,3).
Theory: G.Makov, and M.C.Payne,
     &quot;Periodic boundary conditions in ab initio
     calculations&quot; , <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.51.4014">PRB 51, 4014 (1995)</a>.
            </opt>
            <opt val="'martyna-tuckerman', 'm-t', 'mt'" >
Martyna-Tuckerman correction
to both total energy and scf potential. Adapted from:
G.J. Martyna, and M.E. Tuckerman,
&quot;A reciprocal space based method for treating long
range interactions in ab-initio and force-field-based
calculation in clusters&quot;, J. Chem. Phys. 110, 2810 (1999),
<a href="https://doi.org/10.1063/1.477923">doi:10.1063/1.477923</a>.
            </opt>
            <opt val="'esm'" >
Effective Screening Medium Method.
For polarized or charged slab calculation, embeds
the simulation cell within an effective semi-
infinite medium in the perpendicular direction
(along z). Embedding regions can be vacuum or
semi-infinite metal electrodes (use <ref>esm_bc</ref> to
choose boundary conditions). If between two
electrodes, an optional electric field
(<ref>esm_efield</ref>) may be applied. Method described in
M. Otani and O. Sugino, &quot;First-principles calculations
of charged surfaces and interfaces: A plane-wave
nonrepeated slab approach&quot;, <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.73.115407">PRB 73, 115407 (2006)</a>.

NB:
   - Two dimensional (xy plane) average charge density
     and electrostatic potentials are printed out to
     &apos;prefix.esm1&apos;.

   - Requires cell with a_3 lattice vector along z,
     normal to the xy plane, with the slab centered
     around z=0.

   - For bc2 with an electric field and bc3 boundary
     conditions, the inversion symmetry along z-direction
     is automatically eliminated.

   - In case of calculation=&apos;vc-relax&apos;, use
     <ref>cell_dofree</ref>=&apos;2Dxy&apos; or other parameters so that
     c-vector along z-axis should not be moved.

See <ref>esm_bc</ref>, <ref>esm_efield</ref>, <ref>esm_w</ref>, <ref>esm_nfit</ref>.
            </opt>
            <opt val="'2D'" >
Truncation of the Coulomb interaction in the z direction
for structures periodic in the x-y plane. Total energy,
forces and stresses are computed in a two-dimensional framework.
Linear-response calculations () done on top of a self-consistent
calculation with this flag will automatically be performed in
the 2D framework as well. Please refer to:
Sohier, T., Calandra, M., &amp; Mauri, F. (2017), &quot;Density functional
perturbation theory for gated two-dimensional heterostructures:
Theoretical developments and application to flexural phonons in graphene&quot;,
<a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.96.075448">PRB, 96, 075448 (2017)</a>.

NB:
   - The length of the unit-cell along the z direction should
     be larger than twice the thickness of the 2D material
     (including electrons). A reasonable estimate for a
     layer&apos;s thickness could be the interlayer distance in the
     corresponding layered bulk material. Otherwise,
     the atomic thickness + 10 bohr should be a safe estimate.
     There is also a lower limit of 20 bohr imposed by the cutoff
     radius used to read pseudopotentials (see read_pseudo.f90 in Modules).

   - As for ESM above, only in-plane stresses make sense and one
     should use <ref>cell_dofree</ref>= &apos;2Dxy&apos; in a <b>vc-relax</b> calculation.
            </opt>
         </options>
      </var>
      <var name="esm_bc" type="CHARACTER" >
         <see> assume_isolated
         </see>
         <default> &apos;pbc&apos;
         </default>
         <options>
            <info>
If <ref>assume_isolated</ref> = &apos;esm&apos;, determines the boundary
conditions used for either side of the slab.

Currently available choices:
            </info>
            <opt val="'pbc'" > (default): regular periodic calculation (no ESM).
            </opt>
            <opt val="'bc1'" > Vacuum-slab-vacuum (open boundary conditions).
            </opt>
            <opt val="'bc2'" >
Metal-slab-metal (dual electrode configuration).
See also <ref>esm_efield</ref>.
            </opt>
            <opt val="'bc3'" > Vacuum-slab-metal
            </opt>
         </options>
      </var>
      <var name="esm_w" type="REAL" >
         <see> assume_isolated
         </see>
         <default> 0.d0
         </default>
         <info>
If <ref>assume_isolated</ref> = &apos;esm&apos;, determines the position offset
[in a.u.] of the start of the effective screening region,
measured relative to the cell edge. (ESM region begins at
z = +/- [L_z/2 + esm_w] ).
         </info>
      </var>
      <var name="esm_efield" type="REAL" >
         <see> assume_isolated
         </see>
         <default> 0.d0
         </default>
         <info>
If <ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc2&apos;, gives the
magnitude of the electric field [Ry/a.u.] to be applied
between semi-infinite ESM electrodes.
         </info>
      </var>
      <var name="esm_nfit" type="INTEGER" >
         <see> assume_isolated
         </see>
         <default> 4
         </default>
         <info>
If <ref>assume_isolated</ref> = &apos;esm&apos;, gives the number of z-grid points
for the polynomial fit along the cell edge.
         </info>
      </var>
      <var name="lgcscf" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. perform a constant bias potential (constant-mu) calculation
with Grand-Canonical SCF. (JCP 146, 114104 (2017), R.Sundararaman, et al.)

NB:
- The total energy displayed in output includes the potentiostat
  contribution (-mu*N).
- <ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc2&apos; or &apos;bc3&apos; must be set
  in <ref>SYSTEM</ref> namelist.
- ESM-RISM is also supported (<ref>assume_isolated</ref> = &apos;esm&apos; and <ref>esm_bc</ref> = &apos;bc1&apos;
  and <ref>trism</ref> = .TRUE.).
- <ref>mixing_mode</ref> has to be &apos;TF&apos; or &apos;local-TF&apos;, also its default is &apos;TF.&apos;
- The default of <ref>mixing_beta</ref> is 0.1 with ESM-RISM, 0.2 without ESM-RISM.
- The default of <ref>diago_thr_init</ref> is 1.D-5.
- <ref>diago_full_acc</ref> is always .TRUE. .
- <ref>diago_rmm_conv</ref> is always .TRUE. .
         </info>
      </var>
      <var name="gcscf_mu" type="REAL" >
         <status> REQUIRED
         </status>
         <info>
The target Fermi energy (eV) of GC-SCF. One can start
with appropriate total charge of the system by giving <ref>tot_charge</ref> .
         </info>
      </var>
      <var name="gcscf_conv_thr" type="REAL" >
         <default> 1.D-2
         </default>
         <info>
Convergence threshold of Fermi energy (eV) for GC-SCF.
         </info>
      </var>
      <var name="gcscf_beta" type="REAL" >
         <default> 0.05D0
         </default>
         <info>
Mixing factor for GC-SCF.
Larger values are recommended,
if systems with small DOS on Fermi surface as graphite.
         </info>
      </var>
      <var name="vdw_corr" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <see>
london_s6, london_rcut, london_c6, london_rvdw,
dftd3_version, dftd3_threebody, ts_vdw_econv_thr, ts_vdw_isolated, xdm_a1, xdm_a2
         </see>
         <options>
            <info>
Type of Van der Waals correction. Allowed values:
            </info>
            <opt val="'grimme-d2', 'Grimme-D2', 'DFT-D', 'dft-d'" >
Semiempirical Grimme&apos;s DFT-D2. Optional variables:
<ref>london_s6</ref>, <ref>london_rcut</ref>, <ref>london_c6</ref>, <ref>london_rvdw</ref>
S. Grimme, J. Comp. Chem. 27, 1787 (2006), <a href="https://doi.org/10.1002/jcc.20495">doi:10.1002/jcc.20495</a>
V. Barone et al., J. Comp. Chem. 30, 934 (2009), <a href="https://doi.org/10.1002/jcc.21112">doi:10.1002/jcc.21112</a>
            </opt>
            <opt val="'grimme-d3', 'Grimme-D3', 'DFT-D3', 'dft-d3' " >
Semiempirical Grimme&apos;s DFT-D3. Optional variables:
<ref>dftd3_version</ref>, <ref>dftd3_threebody</ref>
S. Grimme et al, J. Chem. Phys 132, 154104 (2010), <a href="https://doi.org/10.1063/1.3382344">doi:10.1063/1.3382344</a>
            </opt>
            <opt val="'TS', 'ts', 'ts-vdw', 'ts-vdW', 'tkatchenko-scheffler'" >
Tkatchenko-Scheffler dispersion corrections with first-principle derived
C6 coefficients.
Optional variables: <ref>ts_vdw_econv_thr</ref>, <ref>ts_vdw_isolated</ref>
See A. Tkatchenko and M. Scheffler, <a href="https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.102.073005">PRL 102, 073005 (2009)</a>.
            </opt>
            <opt val="'MBD', 'mbd', 'many-body-dispersion', 'mbd_vdw'" >
Many-body dipersion (MBD) correction to long-range interactions.
Optional variables: <ref>ts_vdw_isolated</ref>
A. Ambrosetti, A. M. Reilly, R. A. DiStasio, A. Tkatchenko, J. Chem. Phys. 140
18A508 (2014).
            </opt>
            <opt val="'XDM', 'xdm'" >
Exchange-hole dipole-moment model. Optional variables: <ref>xdm_a1</ref>, <ref>xdm_a2</ref>
A. D. Becke et al., J. Chem. Phys. 127, 154108 (2007), <a href="https://doi.org/10.1063/1.2795701">doi:10.1063/1.2795701</a>
A. Otero de la Roza et al., J. Chem. Phys. 136, 174109 (2012),
<a href="https://doi.org/10.1063/1.4705760">doi:10.1063/1.4705760</a>
            </opt>
            <info> Note that non-local functionals (eg vdw-DF) are NOT specified here but in <ref>input_dft</ref>
            </info>
         </options>
      </var>
      <var name="london" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <status>
OBSOLESCENT, same as <ref>vdw_corr</ref>=&apos;DFT-D&apos;
         </status>
      </var>
      <var name="london_s6" type="REAL" >
         <default> 0.75
         </default>
         <info>
global scaling parameter for DFT-D. Default is good for PBE.
         </info>
      </var>
      <dimension name="london_c6" type="REAL" start="1" end="ntyp" >
         <default> standard Grimme-D2 values
         </default>
         <info>
atomic C6 coefficient of each atom type

( if not specified default values from S. Grimme, J. Comp. Chem. 27, 1787 (2006),
  <a href="https://doi.org/10.1002/jcc.20495">doi:10.1002/jcc.20495</a> are used; see file Modules/mm_dispersion.f90 )
         </info>
      </dimension>
      <dimension name="london_rvdw" type="REAL" start="1" end="ntyp" >
         <default> standard Grimme-D2 values
         </default>
         <info>
atomic vdw radii of each atom type

( if not specified default values from S. Grimme, J. Comp. Chem. 27, 1787 (2006),
  <a href="https://doi.org/10.1002/jcc.20495">doi:10.1002/jcc.20495</a> are used; see file Modules/mm_dispersion.f90 )
         </info>
      </dimension>
      <var name="london_rcut" type="REAL" >
         <default> 200
         </default>
         <info>
cutoff radius (a.u.) for dispersion interactions
         </info>
      </var>
      <var name="dftd3_version" type="integer" >
         <default> 3
         </default>
         <options>
            <info>
Version of Grimme implementation of Grimme-D3:
            </info>
            <opt val="dftd3_version = 2" >
Original Grimme-D2 parametrization
            </opt>
            <opt val="dftd3_version = 3" >
Grimme-D3 (zero damping)
            </opt>
            <opt val="dftd3_version = 4" >
Grimme-D3 (BJ damping)
            </opt>
            <opt val="dftd3_version = 5" >
Grimme-D3M (zero damping)
            </opt>
            <opt val="dftd3_version = 6" >
Grimme-D3M (BJ damping)
            </opt>
            <info>
NOTE: not all functionals are parametrized.
            </info>
         </options>
      </var>
      <var name="dftd3_threebody" type="LOGICAL" >
         <default> TRUE
         </default>
         <info>
Turn three-body terms in Grimme-D3 on. If .false. two-body contributions
only are computed, using two-body parameters of Grimme-D3.
If dftd3_version=2, three-body contribution is always disabled.
         </info>
      </var>
      <var name="ts_vdw_econv_thr" type="REAL" >
         <default> 1.D-6
         </default>
         <info>
Optional: controls the convergence of the vdW energy (and forces). The default value
is a safe choice, likely too safe, but you do not gain much in increasing it
         </info>
      </var>
      <var name="ts_vdw_isolated" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
Optional: set it to .TRUE. when computing the Tkatchenko-Scheffler vdW energy or the
Many-Body dispersion (MBD) energy for an isolated (non-periodic) system.
         </info>
      </var>
      <var name="xdm" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <status>
OBSOLESCENT, same as <ref>vdw_corr</ref>=&apos;xdm&apos;
         </status>
      </var>
      <var name="xdm_a1" type="REAL" >
         <default> 0.6836
         </default>
         <info>
Damping function parameter a1 (adimensional). It is NOT necessary to give
a value if the functional is one of B86bPBE, PW86PBE, PBE, BLYP. For functionals
in this list, the coefficients are given in:
   <link>http://schooner.chem.dal.ca/wiki/XDM</link>
   A. Otero de la Roza, E. R. Johnson, J. Chem. Phys. 138, 204109 (2013),
   <a href="https://doi.org/10.1063/1.4705760">doi:10.1063/1.4705760</a>
         </info>
      </var>
      <var name="xdm_a2" type="REAL" >
         <default> 1.5045
         </default>
         <info>
Damping function parameter a2 (angstrom). It is NOT necessary to give
a value if the functional is one of B86bPBE, PW86PBE, PBE, BLYP. For functionals
in this list, the coefficients are given in:
   <link>http://schooner.chem.dal.ca/wiki/XDM</link>
   A. Otero de la Roza, E. R. Johnson, J. Chem. Phys. 138, 204109 (2013),
   <a href="https://doi.org/10.1063/1.4705760">doi:10.1063/1.4705760</a>
         </info>
      </var>
      <var name="space_group" type="INTEGER" >
         <default> 0
         </default>
         <info>
The number of the space group of the crystal, as given
in the International Tables of Crystallography A (ITA).
This allows to give in input only the inequivalent atomic
positions. The positions of all the symmetry equivalent atoms
are calculated by the code. Used only when the atomic positions
are of type crystal_sg. See also <ref>uniqueb</ref>,
<ref>origin_choice</ref>, <ref>rhombohedral</ref>
         </info>
      </var>
      <var name="uniqueb" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
Used only for monoclinic lattices. If .TRUE. the b
unique <ref>ibrav</ref> (-12 or -13) are used, and symmetry
equivalent positions are chosen assuming that the
twofold axis or the mirror normal is parallel to the
b axis. If .FALSE. it is parallel to the c axis.
         </info>
      </var>
      <var name="origin_choice" type="INTEGER" >
         <default> 1
         </default>
         <info>
Used only for space groups that in the ITA allow
the use of two different origins. <ref>origin_choice</ref>=1,
means the first origin, while <ref>origin_choice</ref>=2 is the
second origin.
         </info>
      </var>
      <var name="rhombohedral" type="LOGICAL" >
         <default> .TRUE.
         </default>
         <info>
Used only for rhombohedral space groups.
When .TRUE. the coordinates of the inequivalent atoms are
given with respect to the rhombohedral axes, when .FALSE.
the coordinates of the inequivalent atoms are given with
respect to the hexagonal axes. They are converted internally
to the rhombohedral axes and <ref>ibrav</ref>=5 is used in both cases.
         </info>
      </var>
      <group>
         <label> variables used only if <ref>gate</ref> = .TRUE.
         </label>
         <var name="zgate" type="REAL" >
            <default> 0.5
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE.
Specifies the position of the charged plate which represents
the counter charge in doped systems (<ref>tot_charge</ref> .ne. 0).
In units of the unit cell length in <i>z</i> direction, <ref>zgate</ref> in ]0,1[
Details of the gate potential can be found in
T. Brumme, M. Calandra, F. Mauri; <a href="https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.245406">PRB 89, 245406 (2014)</a>.
            </info>
         </var>
         <var name="relaxz" type="LOGICAL" >
            <default> .FALSE.
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE.
Allows the relaxation of the system towards the charged plate.
Use carefully and utilize either a layer of fixed atoms or a
potential barrier (<ref>block</ref>=.TRUE.) to avoid the atoms moving to
the position of the plate or the dipole of the dipole
correction (<ref>dipfield</ref>=.TRUE.).
            </info>
         </var>
         <var name="block" type="LOGICAL" >
            <default> .FALSE.
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE.
Adds a potential barrier to the total potential seen by the
electrons to mimic a dielectric in field effect configuration
and/or to avoid electrons spilling into the vacuum region for
electron doping. Potential barrier is from <ref>block_1</ref> to <ref>block_2</ref> and
has a height of block_height.
If <ref>dipfield</ref> = .TRUE. then <ref>eopreg</ref> is used for a smooth increase and
decrease of the potential barrier.
            </info>
         </var>
         <var name="block_1" type="REAL" >
            <default> 0.45
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE. and <ref>block</ref> = .TRUE.
lower beginning of the potential barrier, in units of the
unit cell size along <i>z,</i> <ref>block_1</ref> in ]0,1[
            </info>
         </var>
         <var name="block_2" type="REAL" >
            <default> 0.55
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE. and <ref>block</ref> = .TRUE.
upper beginning of the potential barrier, in units of the
unit cell size along <i>z,</i> <ref>block_2</ref> in ]0,1[
            </info>
         </var>
         <var name="block_height" type="REAL" >
            <default> 0.1
            </default>
            <info>
used only if <ref>gate</ref> = .TRUE. and <ref>block</ref> = .TRUE.
Height of the potential barrier in Rydberg.
            </info>
         </var>
      </group>
      <var name="nextffield" type="INTEGER" >
         <default> 0
         </default>
         <info>
Number of activated external ionic force fields.
See Doc/ExternalForceFields.tex for further explanation and parameterizations
         </info>
      </var>
   </namelist>
   <namelist name="ELECTRONS" >
      <var name="electron_maxstep" type="INTEGER" >
         <default> 100
         </default>
         <info>
maximum number of iterations in a scf step. If exact exchange is active,
this will affect the inner loops.
         </info>
      </var>
      <var name="exx_maxstep" type="INTEGER" >
         <default> 100
         </default>
         <info>
maximum number of outer iterations in a scf calculation with exact exchange.
         </info>
      </var>
      <var name="scf_must_converge" type="LOGICAL" >
         <default> .TRUE.
         </default>
         <info>
If .false. do not stop molecular dynamics or ionic relaxation
when electron_maxstep is reached. Use with care.
         </info>
      </var>
      <var name="conv_thr" type="REAL" >
         <default> 1.D-6
         </default>
         <info>
Convergence threshold for selfconsistency:
   estimated energy error &lt; conv_thr
(note that conv_thr is extensive, like the total energy).

For non-self-consistent calculations, conv_thr is used
to set the default value of the threshold (ethr) for
iterative diagonalization: see <ref>diago_thr_init</ref>
         </info>
      </var>
      <var name="adaptive_thr" type="LOGICAL" >
         <default> .FALSE
         </default>
         <info>
If .TRUE. this turns on the use of an adaptive <ref>conv_thr</ref> for
the inner scf loops when using EXX.
         </info>
      </var>
      <var name="conv_thr_init" type="REAL" >
         <default> 1.D-3
         </default>
         <info>
When <ref>adaptive_thr</ref> = .TRUE. this is the convergence threshold
used for the first scf cycle.
         </info>
      </var>
      <var name="conv_thr_multi" type="REAL" >
         <default> 1.D-1
         </default>
         <info>
When <ref>adaptive_thr</ref> = .TRUE. the convergence threshold for
each scf cycle is given by:
max( <ref>conv_thr</ref>, <ref>conv_thr_multi</ref> * dexx )
         </info>
      </var>
      <var name="mixing_mode" type="CHARACTER" >
         <default> &apos;plain&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'plain'" > charge density Broyden mixing
            </opt>
            <opt val="'TF'" >
as above, with simple Thomas-Fermi screening
(for highly homogeneous systems)
            </opt>
            <opt val="'local-TF'" >
as above, with local-density-dependent TF screening
(for highly inhomogeneous systems)
            </opt>
         </options>
      </var>
      <var name="mixing_beta" type="REAL" >
         <default> 0.7D0
         </default>
         <info>
mixing factor for self-consistency
         </info>
      </var>
      <var name="mixing_ndim" type="INTEGER" >
         <default> 8
         </default>
         <info>
number of iterations used in mixing scheme.
If you are tight with memory, you may reduce it to 4 or so.
         </info>
      </var>
      <var name="mixing_fixed_ns" type="INTEGER" >
         <default> 0
         </default>
         <info>
For DFT+U : number of iterations with fixed ns ( ns is the
atomic density appearing in the Hubbard term ).
         </info>
      </var>
      <var name="diagonalization" type="CHARACTER" >
         <default> &apos;david&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'david'" >
Davidson iterative diagonalization with overlap matrix
(default). Fast, may in some rare cases fail.
            </opt>
            <opt val="'cg'" >
Conjugate-gradient-like band-by-band diagonalization.
MUCH slower than &apos;david&apos; but uses less memory and is
(a little bit) more robust.
            </opt>
            <opt val="'ppcg'" >
PPCG iterative diagonalization
            </opt>
            <opt val="'paro', 'ParO'" >
ParO iterative diagonalization
            </opt>
            <opt val="'rmm-davidson', 'rmm-paro'" >
RMM-DIIS iterative diagonalization.
To stabilize the SCF loop
RMM-DIIS is alternated with calls to Davidson or
ParO  solvers depending on the string used.
Other variables that can be used to tune the behavior of
RMM-DIIS are:  <ref>diago_rmm_ndim</ref> and <ref>diago_rmm_conv</ref>
            </opt>
         </options>
      </var>
      <var name="diago_thr_init" type="REAL" >
         <info>
Convergence threshold (ethr) for iterative diagonalization
(the check is on eigenvalue convergence).

For scf calculations: default is 1.D-2 if starting from a
superposition of atomic orbitals; 1.D-5 if starting from a
charge density. During self consistency the threshold
is automatically reduced (but never below 1.D-13) when
approaching convergence.

For non-scf calculations: default is (<ref>conv_thr</ref>/N elec)/10.
         </info>
      </var>
      <var name="diago_cg_maxiter" type="INTEGER" >
         <info>
For conjugate gradient diagonalization:  max number of iterations
         </info>
      </var>
      <var name="diago_ppcg_maxiter" type="INTEGER" >
         <info>
For <b>ppcg</b> diagonalization:  max number of iterations
         </info>
      </var>
      <var name="diago_david_ndim" type="INTEGER" >
         <default> 2
         </default>
         <info>
For Davidson diagonalization: dimension of workspace
(number of wavefunction packets, at least 2 needed).
A larger value may yield a smaller number of iterations in
the algorithm but uses more memory and more CPU time in
subspace diagonalization (cdiaghg/rdiaghg). You may try
<ref>diago_david_ndim</ref>=4 if you are not tight on memory
and if the time spent in subspace diagonalization is small
compared to the time spent in h_psi
         </info>
      </var>
      <var name="diago_rmm_ndim" type="INTEGER" >
         <default> 4
         </default>
         <info>
For RMM-DIIS diagonalization: dimension of workspace
(number of wavefunction packets, at least 2 needed).
         </info>
      </var>
      <var name="diago_rmm_conv" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE., RMM-DIIS is performed up to converge.
If .FALSE., RMM-DIIS is performed only once.
         </info>
      </var>
      <var name="diago_gs_nblock" type="INTEGER" >
         <default> 16
         </default>
         <info>
For RMM-DIIS diagonalization:
blocking size of Gram-Schmidt orthogonalization
         </info>
      </var>
      <var name="diago_full_acc" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. all the empty states are diagonalized at the same level
of accuracy of the occupied ones. Otherwise the empty states are
diagonalized using a larger threshold (this should not affect
total energy, forces, and other ground-state properties).
         </info>
      </var>
      <var name="efield" type="REAL" >
         <default> 0.D0
         </default>
         <info>
Amplitude of the finite electric field (in Ry a.u.;
1 a.u. = 36.3609*10^10 V/m). Used only if <ref>lelfield</ref>==.TRUE.
and if k-points (<ref>K_POINTS</ref> card) are not automatic.
         </info>
      </var>
      <dimension name="efield_cart" start="1" end="3" type="REAL" >
         <default> (0.D0, 0.D0, 0.D0)
         </default>
         <info>
Finite electric field (in Ry a.u.=36.3609*10^10 V/m) in
cartesian axis. Used only if <ref>lelfield</ref>==.TRUE. and if
k-points (<ref>K_POINTS</ref> card) are automatic.
         </info>
      </dimension>
      <var name="efield_phase" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'read'" >
set the zero of the electronic polarization (with <ref>lelfield</ref>==.true..)
to the result of a previous calculation
            </opt>
            <opt val="'write'" >
write on disk data on electronic polarization to be read in another
calculation
            </opt>
            <opt val="'none'" >
none of the above points
            </opt>
         </options>
      </var>
      <var name="startingpot" type="CHARACTER" >
         <options>
            <info> Available options are:
            </info>
            <opt val="'atomic'" >
starting potential from atomic charge superposition
(default for scf, *relax, *md)
            </opt>
            <opt val="'file'" >
start from existing &quot;charge-density.xml&quot; file in the
directory specified by variables <ref>prefix</ref> and <ref>outdir</ref>
For nscf and bands calculation this is the default
and the only sensible possibility.
            </opt>
         </options>
      </var>
      <var name="startingwfc" type="CHARACTER" >
         <default> &apos;atomic+random&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'atomic'" >
Start from superposition of atomic orbitals.
If not enough atomic orbitals are available,
fill with random numbers the remaining wfcs
The scf typically starts better with this option,
but in some high-symmetry cases one can &quot;loose&quot;
valence states, ending up in the wrong ground state.
            </opt>
            <opt val="'atomic+random'" >
As above, plus a superimposed &quot;randomization&quot;
of atomic orbitals. Prevents the &quot;loss&quot; of states
mentioned above.
            </opt>
            <opt val="'random'" >
Start from random wfcs. Slower start of scf but safe.
It may also reduce memory usage in conjunction with
<ref>diagonalization</ref>=&apos;cg&apos;.
            </opt>
            <opt val="'file'" >
Start from an existing wavefunction file in the
directory specified by variables <ref>prefix</ref> and <ref>outdir</ref>.
            </opt>
         </options>
      </var>
      <var name="tqr" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .true., use a real-space algorithm for augmentation
charges of ultrasoft pseudopotentials and PAWsets.
Faster but numerically less accurate than the default
G-space algorithm. Use with care and after testing!
         </info>
      </var>
      <var name="real_space" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .true., exploit real-space localization to compute
matrix elements for nonlocal projectors. Faster and in
principle better scaling than the default G-space algorithm,
but numerically less accurate, may lead to some loss of
translational invariance. Use with care and after testing!
         </info>
      </var>
   </namelist>
   <namelist name="IONS" >
      <label>
REQUIRED if <ref>calculation</ref> == &apos;relax&apos;, &apos;md&apos;, &apos;vc-relax&apos;, or &apos;vc-md&apos;
OPTIONAL for <ref>calculation</ref> == &apos;scf&apos; (only <ref>ion_positions</ref> is used)
      </label>
      <var name="ion_positions" type="CHARACTER" >
         <default> &apos;default&apos;
         </default>
         <options>
            <info> Available options are:
            </info>
            <opt val="'default'" >
if restarting, use atomic positions read from the
restart file; in all other cases, use atomic
positions from standard input.
            </opt>
            <opt val="'from_input'" >
read atomic positions from standard input, even if restarting.
            </opt>
         </options>
      </var>
      <var name="ion_velocities" type="CHARACTER" >
         <default> &apos;default&apos;
         </default>
         <options>
            <info>
Initial ionic velocities. Available options are:
            </info>
            <opt val="'default'" >
start a new simulation from random thermalized
distribution of velocities if <ref>tempw</ref> is set,
with zero velocities otherwise; restart from
atomic velocities read from the restart file
            </opt>
            <opt val="'from_input'" >
start or continue the simulation with atomic
velocities read from standard input - see card
<ref>ATOMIC_VELOCITIES</ref>
            </opt>
         </options>
      </var>
      <var name="ion_dynamics" type="CHARACTER" >
         <options>
            <info>
Specify the type of ionic dynamics.

For different type of calculation different possibilities are
allowed and different default values apply:

<b>CASE</b> ( <ref>calculation</ref> == &apos;relax&apos; )
            </info>
            <opt val="'bfgs'" >
<b>(default)</b>  use BFGS quasi-newton algorithm,
based on the trust radius procedure,
for structural relaxation
            </opt>
            <opt val="'damp'" >
use damped (quick-min Verlet)
dynamics for structural relaxation
Can be used for constrained
optimisation: see <ref>CONSTRAINTS</ref> card
            </opt>
            <opt val="'fire'" >
use the FIRE minimization algorithm employing the
semi-implicit Euler integration scheme
see:
   Bitzek et al.,<a href="https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.97.170201">PRL, 97, 170201, (2006)</a>, <a href="https://doi.org/10.1103/PhysRevLett.97.170201">doi: 10.1103/PhysRevLett.97.170201</a>
   Guenole et al.,CMS, 175, 109584, (2020), <a href="https://doi.org/10.1016/j.commatsci.2020.109584">doi: 10.1016/j.commatsci.2020.109584</a>

Can be used for constrained
optimisation: see <ref>CONSTRAINTS</ref> card
            </opt>
            <info>
<b>CASE</b> ( <ref>calculation</ref> == &apos;md&apos; )
            </info>
            <opt val="'verlet'" >
<b>(default)</b>  use Verlet algorithm to integrate
Newton&apos;s equation. For constrained
dynamics, see <ref>CONSTRAINTS</ref> card
            </opt>
            <opt val="'langevin'" >
ion dynamics is over-damped Langevin
            </opt>
            <opt val="'langevin-smc'" >
over-damped Langevin with Smart Monte Carlo:
see R.J. Rossky, JCP, 69, 4628 (1978), <a href="https://doi.org/10.1063/1.436415">doi:10.1063/1.436415</a>
            </opt>
            <info>
<b>CASE</b> ( <ref>calculation</ref> == &apos;vc-relax&apos; )
            </info>
            <opt val="'bfgs'" >
<b>(default)</b>  use BFGS quasi-newton algorithm;
<ref>cell_dynamics</ref> must be &apos;bfgs&apos; too
            </opt>
            <opt val="'damp'" >
use damped (Beeman) dynamics for
structural relaxation
            </opt>
            <info>
<b>CASE</b> ( <ref>calculation</ref> == &apos;vc-md&apos; )
            </info>
            <opt val="'beeman'" >
<b>(default)</b>  use Beeman algorithm to integrate
Newton&apos;s equation
            </opt>
         </options>
      </var>
      <var name="pot_extrapolation" type="CHARACTER" >
         <default> &apos;atomic&apos;
         </default>
         <options>
            <info>
Used to extrapolate the potential from preceding ionic steps.
            </info>
            <opt val="'none'" > no extrapolation
            </opt>
            <opt val="'atomic'" >
extrapolate the potential as if it was a sum of
atomic-like orbitals
            </opt>
            <opt val="'first_order'" >
extrapolate the potential with first-order
formula
            </opt>
            <opt val="'second_order'" >
as above, with second order formula
            </opt>
            <info>
Note: &apos;first_order&apos; and &apos;second-order&apos; extrapolation make sense
only for molecular dynamics calculations
            </info>
         </options>
      </var>
      <var name="wfc_extrapolation" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <options>
            <info>
Used to extrapolate the wavefunctions from preceding ionic steps.
            </info>
            <opt val="'none'" > no extrapolation
            </opt>
            <opt val="'first_order'" >
extrapolate the wave-functions with first-order formula.
            </opt>
            <opt val="'second_order'" >
as above, with second order formula.
            </opt>
            <info>
Note: <b>&apos;first_order&apos;</b> and <b>&apos;second-order&apos;</b> extrapolation make sense
only for molecular dynamics calculations
            </info>
         </options>
      </var>
      <var name="remove_rigid_rot" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
This keyword is useful when simulating the dynamics and/or the
thermodynamics of an isolated system. If set to true the total
torque of the internal forces is set to zero by adding new forces
that compensate the spurious interaction with the periodic
images. This allows for the use of smaller supercells.

BEWARE: since the potential energy is no longer consistent with
the forces (it still contains the spurious interaction with the
repeated images), the total energy is not conserved anymore.
However the dynamical and thermodynamical properties should be
in closer agreement with those of an isolated system.
Also the final energy of a structural relaxation will be higher,
but the relaxation itself should be faster.
         </info>
      </var>
      <group>
         <label>
variables used for molecular dynamics
         </label>
         <var name="ion_temperature" type="CHARACTER" >
            <default> &apos;not_controlled&apos;
            </default>
            <options>
               <info> Available options are:
               </info>
               <opt val="'rescaling'" >
control ionic temperature via velocity rescaling
(first method) see parameters <ref>tempw</ref>, <ref>tolp</ref>, and
<ref>nraise</ref> (for VC-MD only). This rescaling method
is the only one currently implemented in VC-MD
               </opt>
               <opt val="'rescale-v'" >
control ionic temperature via velocity rescaling
(second method) see parameters <ref>tempw</ref> and <ref>nraise</ref>
               </opt>
               <opt val="'rescale-T'" >
scale temperature of the thermostat every <ref>nraise</ref> steps
by <ref>delta_t</ref>, starting from <ref>tempw</ref>.
The temperature is controlled via velocitiy rescaling.
               </opt>
               <opt val="'reduce-T'" >
reduce temperature of the thermostat every <ref>nraise</ref> steps
by the (negative) value <ref>delta_t</ref>, starting from <ref>tempw</ref>.
If  <ref>delta_t</ref> is positive, the target temperature is augmented.
The temperature is controlled via velocitiy rescaling.
               </opt>
               <opt val="'berendsen'" >
control ionic temperature using &quot;soft&quot; velocity
rescaling - see parameters <ref>tempw</ref> and <ref>nraise</ref>
               </opt>
               <opt val="'andersen'" >
control ionic temperature using Andersen thermostat
see parameters <ref>tempw</ref> and <ref>nraise</ref>
               </opt>
               <opt val="'svr'" >
control ionic temperature using stochastic-velocity rescaling
(Donadio, Bussi, Parrinello, J. Chem. Phys. 126, 014101, 2007),
with parameters <ref>tempw</ref> and <ref>nraise</ref>.
               </opt>
               <opt val="'initial'" >
initialize ion velocities to temperature <ref>tempw</ref>
and leave uncontrolled further on
               </opt>
               <opt val="'not_controlled'" >
(default) ionic temperature is not controlled
               </opt>
            </options>
         </var>
         <var name="tempw" type="REAL" >
            <default> 300.D0
            </default>
            <info>
Starting temperature (Kelvin) in MD runs
target temperature for most thermostats.
            </info>
         </var>
         <var name="tolp" type="REAL" >
            <default> 100.D0
            </default>
            <info>
Tolerance for velocity rescaling. Velocities are rescaled if
the run-averaged and target temperature differ more than tolp.
            </info>
         </var>
         <var name="delta_t" type="REAL" >
            <default> 1.D0
            </default>
            <info>
if <ref>ion_temperature</ref> == &apos;rescale-T&apos; :
       at each step the instantaneous temperature is multiplied
       by delta_t; this is done rescaling all the velocities.

if <ref>ion_temperature</ref> == &apos;reduce-T&apos; :
       every &apos;nraise&apos; steps the instantaneous temperature is
       reduced by -<ref>delta_t</ref> (i.e. <ref>delta_t</ref> &lt; 0 is added to T)

The instantaneous temperature is calculated at the end of
every ionic move and BEFORE rescaling. This is the temperature
reported in the main output.

For <ref>delta_t</ref> &lt; 0, the actual average rate of heating or cooling
should be roughly C*delta_t/(nraise*dt) (C=1 for an
ideal gas, C=0.5 for a harmonic solid, theorem of energy
equipartition between all quadratic degrees of freedom).
            </info>
         </var>
         <var name="nraise" type="INTEGER" >
            <default> 1
            </default>
            <info>
if <ref>ion_temperature</ref> == &apos;reduce-T&apos; :
       every <ref>nraise</ref> steps the instantaneous temperature is
       reduced by -<ref>delta_t</ref> (i.e. <ref>delta_t</ref> is added to the temperature)

if <ref>ion_temperature</ref> == &apos;rescale-v&apos; :
       every <ref>nraise</ref> steps the average temperature, computed from
       the last <ref>nraise</ref> steps, is rescaled to <ref>tempw</ref>

if <ref>ion_temperature</ref> == &apos;rescaling&apos; and <ref>calculation</ref> == &apos;vc-md&apos; :
       every <ref>nraise</ref> steps the instantaneous temperature
       is rescaled to <ref>tempw</ref>

if <ref>ion_temperature</ref> == &apos;berendsen&apos; :
       the &quot;rise time&quot; parameter is given in units of the time step:
       tau = nraise*dt, so dt/tau = 1/nraise

if <ref>ion_temperature</ref> == &apos;andersen&apos; :
       the &quot;collision frequency&quot; parameter is given as nu=1/tau
       defined above, so nu*dt = 1/nraise

if <ref>ion_temperature</ref> == &apos;svr&apos; :
       the &quot;characteristic time&quot; of the thermostat is set to
       tau = nraise*dt
            </info>
         </var>
         <var name="refold_pos" type="LOGICAL" >
            <default> .FALSE.
            </default>
            <info>
This keyword applies only in the case of molecular dynamics or
damped dynamics. If true the ions are refolded at each step into
the supercell.
            </info>
         </var>
      </group>
      <group>
         <label>
keywords used only in BFGS calculations
         </label>
         <var name="upscale" type="REAL" >
            <default> 100.D0
            </default>
            <info>
Max reduction factor for <ref>conv_thr</ref> during structural optimization
<ref>conv_thr</ref> is automatically reduced when the relaxation
approaches convergence so that forces are still accurate,
but <ref>conv_thr</ref> will not be reduced to less that <ref>conv_thr</ref> / <ref>upscale</ref>.
            </info>
         </var>
         <var name="bfgs_ndim" type="INTEGER" >
            <default> 1
            </default>
            <info>
Number of old forces and displacements vectors used in the
PULAY mixing of the residual vectors obtained on the basis
of the inverse hessian matrix given by the BFGS algorithm.
When <ref>bfgs_ndim</ref> = 1, the standard quasi-Newton BFGS method is
used.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_max" type="REAL" >
            <default> 0.8D0
            </default>
            <info>
Maximum ionic displacement in the structural relaxation.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_min" type="REAL" >
            <default> 1.D-3
            </default>
            <info>
Minimum ionic displacement in the structural relaxation
BFGS is reset when <ref>trust_radius</ref> &lt; <ref>trust_radius_min</ref>.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_ini" type="REAL" >
            <default> 0.5D0
            </default>
            <info>
Initial ionic displacement in the structural relaxation.
(bfgs only)
            </info>
         </var>
         <var name="w_1" type="REAL" >
            <default> 0.01D0
            </default>
            <see> w_2
            </see>
         </var>
         <var name="w_2" type="REAL" >
            <default> 0.5D0
            </default>
            <info>
Parameters used in line search based on the Wolfe conditions.
(bfgs only)
            </info>
         </var>
      </group>
      <group>
         <label>
keywords used only in the FIRE minimization algorithm
         </label>
         <var name="fire_alpha_init" type="REAL" >
            <default> 0.2D0
            </default>
            <info>
Initial value of the alpha mixing factor in the FIRE minimization scheme;
recommended values are between 0.1 and 0.3
            </info>
         </var>
         <var name="fire_falpha" type="REAL" >
            <default> 0.99D0
            </default>
            <info>
Scaling of the alpha mixing parameter for steps with P &gt; 0;
            </info>
         </var>
         <var name="fire_nmin" type="INTEGER" >
            <default> 5
            </default>
            <info>
Minimum number of steps with P &gt; 0 before increase of <ref>dt</ref>
            </info>
         </var>
         <var name="fire_f_inc" type="REAL" >
            <default> 1.1D0
            </default>
            <info>
Factor for increasing <ref>dt</ref>
            </info>
         </var>
         <var name="fire_f_dec" type="REAL" >
            <default> 0.5D0
            </default>
            <info>
Factor for decreasing <ref>dt</ref>
            </info>
         </var>
         <var name="fire_dtmax" type="REAL" >
            <default> 10.D0
            </default>
            <info>
Determines the maximum value of <ref>dt</ref> in the FIRE minimization;
dtmax = fire_dtmax*<ref>dt</ref>
            </info>
         </var>
      </group>
   </namelist>
   <namelist name="CELL" >
      <label>
input this namelist only if <ref>calculation</ref> == &apos;vc-relax&apos; or &apos;vc-md&apos;
      </label>
      <var name="cell_dynamics" type="CHARACTER" >
         <options>
            <info>
Specify the type of dynamics for the cell.
For different type of calculation different possibilities
are allowed and different default values apply:

<b>CASE</b> ( <ref>calculation</ref> == &apos;vc-relax&apos; )
            </info>
            <opt val="'none'" > no dynamics
            </opt>
            <opt val="'sd'" > steepest descent ( not implemented )
            </opt>
            <opt val="'damp-pr'" >
damped (Beeman) dynamics of the Parrinello-Rahman extended lagrangian
            </opt>
            <opt val="'damp-w'" >
damped (Beeman) dynamics of the new Wentzcovitch extended lagrangian
            </opt>
            <opt val="'bfgs'" >
BFGS quasi-newton algorithm <b>(default)</b>
<ref>ion_dynamics</ref> must be <b>&apos;bfgs&apos;</b> too
            </opt>
            <info>
<b>CASE</b> ( <ref>calculation</ref> == &apos;vc-md&apos; )
            </info>
            <opt val="'none'" > no dynamics
            </opt>
            <opt val="'pr'" >
(Beeman) molecular dynamics of the Parrinello-Rahman extended lagrangian
            </opt>
            <opt val="'w'" >
(Beeman) molecular dynamics of the new Wentzcovitch extended lagrangian
            </opt>
         </options>
      </var>
      <var name="press" type="REAL" >
         <default> 0.D0
         </default>
         <info>
Target pressure [KBar] in a variable-cell md or relaxation run.
         </info>
      </var>
      <var name="wmass" type="REAL" >
         <default>
0.75*Tot_Mass/pi**2 for Parrinello-Rahman MD;
0.75*Tot_Mass/pi**2/Omega**(2/3) for Wentzcovitch MD
         </default>
         <info>
Fictitious cell mass [amu] for variable-cell simulations
(both &apos;vc-md&apos; and &apos;vc-relax&apos;)
         </info>
      </var>
      <var name="cell_factor" type="REAL" >
         <default> 2.0 for variable-cell calculations, 1.0 otherwise
         </default>
         <info>
Used in the construction of the pseudopotential tables.
It should exceed the maximum linear contraction of the
cell during a simulation.
         </info>
      </var>
      <var name="press_conv_thr" type="REAL" >
         <default> 0.5D0 Kbar
         </default>
         <info>
Convergence threshold on the pressure for variable cell
relaxation (&apos;vc-relax&apos; : note that the other convergence
            thresholds for ionic relaxation apply as well).
         </info>
      </var>
      <var name="cell_dofree" type="CHARACTER" >
         <default> &apos;all&apos;
         </default>
         <options>
            <info>
Select which of the cell parameters should be moved:
            </info>
            <opt val="'all'" > all axis and angles are moved
            </opt>
            <opt val="'ibrav'" >
all axis and angles are moved,
               but the lattice remains consistent
               with the initial ibrav choice. You can use this option in combination
               with any other one by specifying &quot;ibrav+option&quot;. Please note that some
               combinations do not make sense for some crystals and will guarantee that
               the relax will never converge. E.g. &apos;ibrav+2Dxy&apos; is not a problem for
               hexagonal cells, but will never converge for cubic ones.
            </opt>
            <opt val="'a'" > the x component of axis 1 (v1_x) is fixed
            </opt>
            <opt val="'b'" > the y component of axis 2 (v2_y) is fixed
            </opt>
            <opt val="'c'" > the z component of axis 3 (v3_z) is fixed
            </opt>
            <opt val="'fixa'" > axis 1 (v1_x,v1_y,v1_z) is fixed
            </opt>
            <opt val="'fixb'" > axis 2 (v2_x,v2_y,v2_z) is fixed
            </opt>
            <opt val="'fixc'" > axis 3 (v3_x,v3_y,v3_z) is fixed
            </opt>
            <opt val="'x'" > only the x component of axis 1 (v1_x) is moved
            </opt>
            <opt val="'y'" > only the y component of axis 2 (v2_y) is moved
            </opt>
            <opt val="'z'" > only the z component of axis 3 (v3_z) is moved
            </opt>
            <opt val="'xy'" > only v1_x and v2_y are moved
            </opt>
            <opt val="'xz'" > only v1_x and v3_z are moved
            </opt>
            <opt val="'yz'" > only v2_y and v3_z are moved
            </opt>
            <opt val="'xyz'" > only v1_x, v2_y, v3_z are moved
            </opt>
            <opt val="'shape'" > all axis and angles, keeping the volume fixed
            </opt>
            <opt val="'volume'" > the volume changes, keeping all angles fixed (i.e. only celldm(1) changes)
            </opt>
            <opt val="'2Dxy'" > only x and y components are allowed to change
            </opt>
            <opt val="'2Dshape'" > as above, keeping the area in xy plane fixed
            </opt>
            <opt val="'epitaxial_ab'" > fix axis 1 and 2 while allowing axis 3 to move
            </opt>
            <opt val="'epitaxial_ac'" > fix axis 1 and 3 while allowing axis 2 to move
            </opt>
            <opt val="'epitaxial_bc'" > fix axis 2 and 3 while allowing axis 1 to move
            </opt>
            <info>
BEWARE: if axis are not orthogonal, some of these options do not
        work (symmetry is broken). If you are not happy with them,
        edit subroutine init_dofree in file Modules/cell_base.f90
            </info>
         </options>
      </var>
   </namelist>
   <namelist name="FCP" >
      <label>
Input this namelist only if <ref>lfcp</ref> = .TRUE.
      </label>
      <var name="fcp_mu" type="REAL" >
         <status> REQUIRED
         </status>
         <info>
The target Fermi energy (eV). One can start
with appropriate total charge of the system by giving <ref>tot_charge</ref> .
         </info>
      </var>
      <var name="fcp_dynamics" type="CHARACTER" >
         <options>
            <info>
Specify the type of dynamics for the Fictitious Charge Particle (FCP).

For different type of calculation different possibilities
are allowed and different default values apply:

<b>CASE</b> ( <ref>calculation</ref> == &apos;relax&apos; )
            </info>
            <opt val="'bfgs'" >
<b>(default)</b> BFGS quasi-newton algorithm, coupling with ions relaxation
<ref>ion_dynamics</ref> must be <b>&apos;bfgs&apos;</b> too
            </opt>
            <opt val="'newton'" >
Newton-Raphson algorithm with DIIS
<ref>ion_dynamics</ref> must be <b>&apos;damp&apos;</b> too
            </opt>
            <opt val="'damp'" >
damped (quick-min Verlet) dynamics for FCP relaxation
<ref>ion_dynamics</ref> must be <b>&apos;damp&apos;</b> too
            </opt>
            <opt val="'lm'" >
Line-Minimization algorithm for FCP relaxation
<ref>ion_dynamics</ref> must be <b>&apos;damp&apos;</b> too
            </opt>
            <info>
<b>CASE</b> ( <ref>calculation</ref> == &apos;md&apos; )
            </info>
            <opt val="'velocity-verlet'" >
<b>(default)</b> Velocity-Verlet algorithm to integrate Newton&apos;s equation.
<ref>ion_dynamics</ref> must be <b>&apos;verlet&apos;</b> too
            </opt>
            <opt val="'verlet'" >
<b>Verlet</b> algorithm to integrate Newton&apos;s equation.
<ref>ion_dynamics</ref> must be <b>&apos;verlet&apos;</b> too
            </opt>
         </options>
      </var>
      <var name="fcp_conv_thr" type="REAL" >
         <default> 1.D-2
         </default>
         <info>
Convergence threshold on force (eV) for FCP relaxation.
         </info>
      </var>
      <var name="fcp_ndiis" type="INTEGER" >
         <default> 4
         </default>
         <info>
Size of DIIS for FCP relaxation,
used only if <ref>fcp_dynamics</ref> = &apos;newton&apos;.
         </info>
      </var>
      <group>
         <label>
Variables used for FCP dynamics.
         </label>
         <var name="fcp_mass" type="REAL" >
            <default>
5.D+6 / (xy area) for ESM only;
5.D+4 / (xy area) for ESM-RISM
            </default>
            <info>
Mass of the FCP.
            </info>
         </var>
         <var name="fcp_velocity" type="REAL" >
            <default> determined by <ref>fcp_temperature</ref>
            </default>
            <info>
Initial velocity of the FCP.
            </info>
         </var>
         <var name="fcp_temperature" type="CHARACTER" >
            <default> <ref>ion_temperature</ref>
            </default>
            <options>
               <info> Available options are:
               </info>
               <opt val="'rescaling'" >
control FCP&apos;s temperature via velocity rescaling
(first method) see parameters <ref>fpc_tempw</ref> and <ref>fcp_tolp</ref>.
               </opt>
               <opt val="'rescale-v'" >
control FCP&apos;s temperature via velocity rescaling
(second method) see parameters <ref>fcp_tempw</ref> and <ref>fcp_nraise</ref>
               </opt>
               <opt val="'rescale-T'" >
control FCP&apos;s temperature via velocity rescaling
(third method) see parameter <ref>fcp_delta_t</ref>
               </opt>
               <opt val="'reduce-T'" >
reduce FCP&apos;s temperature every <ref>fcp_nraise</ref> steps
by the (negative) value <ref>fcp_delta_t</ref>
               </opt>
               <opt val="'berendsen'" >
control FCP&apos;s temperature using &quot;soft&quot; velocity
rescaling - see parameters <ref>fcp_tempw</ref> and <ref>fcp_nraise</ref>
               </opt>
               <opt val="'andersen'" >
control FCP&apos;s temperature using Andersen thermostat
see parameters <ref>fcp_tempw</ref> and <ref>fcp_nraise</ref>
               </opt>
               <opt val="'initial'" >
initialize FCP&apos;s velocities to temperature <ref>fcp_tempw</ref>
and leave uncontrolled further on
               </opt>
               <opt val="'not_controlled'" >
<b>(default)</b> FCP&apos;s temperature is not controlled
               </opt>
            </options>
         </var>
         <var name="fcp_tempw" type="REAL" >
            <default> <ref>tempw</ref>
            </default>
            <info>
Starting temperature (Kelvin) in FCP dynamics runs
target temperature for most thermostats.
            </info>
         </var>
         <var name="fcp_tolp" type="REAL" >
            <default> <ref>tolp</ref>
            </default>
            <info>
Tolerance for velocity rescaling. Velocities are rescaled if
the run-averaged and target temperature differ more than tolp.
            </info>
         </var>
         <var name="fcp_delta_t" type="REAL" >
            <default> <ref>delta_t</ref>
            </default>
            <info>
if <ref>fcp_temperature</ref> == &apos;rescale-T&apos; :
       at each step the instantaneous temperature is multiplied
       by fcp_delta_t; this is done rescaling all the velocities.

if <ref>fcp_temperature</ref> == &apos;reduce-T&apos; :
       every <ref>fcp_nraise</ref> steps the instantaneous temperature is
       reduced by -<ref>fcp_delta_t</ref> (i.e. <ref>fcp_delta_t</ref> &lt; 0 is added to T)

The instantaneous temperature is calculated at the end of
FCP&apos;s move and BEFORE rescaling. This is the temperature
reported in the main output.

For <ref>fcp_delta_t</ref> &lt; 0, the actual average rate of heating or cooling
should be roughly C*fcp_delta_t/(fcp_nraise*dt) (C=1 for an
ideal gas, C=0.5 for a harmonic solid, theorem of energy
equipartition between all quadratic degrees of freedom).
            </info>
         </var>
         <var name="fcp_nraise" type="INTEGER" >
            <default> <ref>nraise</ref>
            </default>
            <info>
if <ref>fcp_temperature</ref> == &apos;reduce-T&apos; :
       every <ref>fcp_nraise</ref> steps the instantaneous temperature is
       reduced by -<ref>fcp_delta_t</ref> (i.e. <ref>fcp_delta_t</ref> is added to the temperature)

if <ref>fcp_temperature</ref> == &apos;rescale-v&apos; :
       every <ref>fcp_nraise</ref> steps the average temperature, computed from
       the last <ref>fcp_nraise</ref> steps, is rescaled to <ref>fcp_tempw</ref>

if <ref>fcp_temperature</ref> == &apos;berendsen&apos; :
       the &quot;rise time&quot; parameter is given in units of the time step:
       tau = fcp_nraise*dt, so dt/tau = 1/fcp_nraise

if <ref>fcp_temperature</ref> == &apos;andersen&apos; :
       the &quot;collision frequency&quot; parameter is given as nu=1/tau
       defined above, so nu*dt = 1/fcp_nraise
            </info>
         </var>
      </group>
      <var name="freeze_all_atoms" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE., freeze all atoms
to perform relaxation or dynamics only with FCP.
         </info>
      </var>
   </namelist>
   <namelist name="RISM" >
      <label>
Input this namelist only if <ref>trism</ref> = .TRUE.
      </label>
      <var name="nsolv" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
The number of solvents (i.e. molecular species) in the unit cell
         </info>
      </var>
      <var name="closure" type="CHARACTER" >
         <default> &apos;kh&apos;
         </default>
         <options>
            <info>
Specify the type of closure equation:
            </info>
            <opt val="'kh'" >
The Kovalenko and Hirata&apos;s model.
[A.Kovalenko, F.Hirata, JCP 110, 10095 (1999), <a href="https://doi.org/10.1063/1.478883">doi:10.1063/1.478883</a>]
            </opt>
            <opt val="'hnc'" >
The HyperNetted-Chain model, which is
suitable only for solvents without charge.
[J.P.Hansen et al., Theory of simple liquids. Academic Press, London, 1990]
            </opt>
         </options>
      </var>
      <var name="tempv" type="REAL" >
         <default> 300.D0
         </default>
         <info>
Temperature (Kelvin) of solvents.
         </info>
      </var>
      <var name="ecutsolv" type="REAL" >
         <default> 4 * <ref>ecutwfc</ref>
         </default>
         <info>
Kinetic energy cutoff (Ry) for solvent&apos;s correlation functions.
If a solute is an isolated system or slab, you may allowed to
use default value. For a frameworked or porous solute (e.g. Zeolite, MOF),
it is desirable to apply a larger value. Solvents confined in a framework
often have a high frequency.
         </info>
      </var>
      <dimension name="solute_lj" start="1" end="ntyp" type="CHARACTER" >
         <default> &apos;uff&apos;
         </default>
         <options>
            <info>
Specify the Lennard-Jones potential of solute on atomic type &apos;i&apos;:
            </info>
            <opt val="'none'" >
The Lennard-Jones potential is not specified here.
you must set <ref>solute_epsilon</ref> and <ref>solute_sigma</ref>.
            </opt>
            <opt val="'uff'" >
Universal Force Field.
[A.K.Rappe et al., JACS 144, 10024 (1992), <a href="https://doi.org/10.1021/ja00051a040">doi:10.1021/ja00051a040</a>]
            </opt>
            <opt val="'clayff'" >
Clay&apos;s Force Field
[R.T.Cygan et al., JPC B 108, 1255 (2004), <a href="https://doi.org/10.1021/jp0363287">doi:10.1021/jp0363287</a>]
            </opt>
            <opt val="'opls-aa'" >
OPLS-AA (generic parameters for QM/MM)
            </opt>
         </options>
      </dimension>
      <dimension name="solute_epsilon" start="1" end="ntyp" type="REAL" >
         <info>
The Lennard-Jones potential of solute on atomic type &apos;i&apos;.
Here, you can set the parameter &apos;epsilon&apos; (kcal/mol).
         </info>
      </dimension>
      <dimension name="solute_sigma" start="1" end="ntyp" type="REAL" >
         <info>
The Lennard-Jones potential of solute on atomic type &apos;i&apos;.
Here, you can set the parameter &apos;sigma&apos; (Angstrom).
         </info>
      </dimension>
      <var name="starting1d" type="CHARACTER" >
         <options>
            <opt val="'zero'" >
Starting correlation functions of 1D-RISM from zero.
( default for scf, *relax, *md )
            </opt>
            <opt val="'file'" >
Start from existing &quot;1d-rism_csvv_r.xml&quot; file in the
directory specified by variables &quot;prefix&quot; and &quot;outdir&quot;.
            </opt>
            <opt val="'fix'" >
Read from existing &quot;1d-rism_csvv_r.xml&quot; file in the
directory specified by variables &quot;prefix&quot; and &quot;outdir&quot;,
and never calculate 1D-RISM.
For nscf and bands calculation this is the default.
            </opt>
         </options>
      </var>
      <var name="starting3d" type="CHARACTER" >
         <options>
            <opt val="'zero'" >
Starting correlation functions of 3D-RISM from zero.
( default for scf, *relax, *md )
            </opt>
            <opt val="'file'" >
Start from existing &quot;3d-rism_csuv_r.dat&quot; file in the
directory specified by variables &quot;prefix&quot; and &quot;outdir&quot;.
For nscf and bands calculation this is the default.
            </opt>
         </options>
      </var>
      <var name="smear1d" type="REAL" >
         <default> 2.D0
         </default>
         <info>
Coulomb smearing radius (a.u.) for 1D-RISM.
         </info>
      </var>
      <var name="smear3d" type="REAL" >
         <default> 2.D0
         </default>
         <info>
Coulomb smearing radius (a.u.) for 3D-RISM.
         </info>
      </var>
      <var name="rism1d_maxstep" type="INTEGER" >
         <default> 50000
         </default>
         <info>
Maximum number of iterations in a 1D-RISM step.
         </info>
      </var>
      <var name="rism3d_maxstep" type="INTEGER" >
         <default> 5000
         </default>
         <info>
Maximum number of iterations in a 3D-RISM step.
         </info>
      </var>
      <var name="rism1d_conv_thr" type="REAL" >
         <default> 1.D-8
         </default>
         <info>
Convergence threshold for 1D-RISM.
         </info>
      </var>
      <var name="rism3d_conv_thr" type="REAL" >
         <default>
1.D-5 if <ref>lgcscf</ref> == .FALSE.;
5.D-6 if <ref>lgcscf</ref> == .TRUE.
         </default>
         <info>
Convergence threshold for 3D-RISM.
         </info>
      </var>
      <var name="mdiis1d_size" type="INTEGER" >
         <default> 20
         </default>
         <info>
Size of Modified DIIS (MDIIS) for 1D-RISM.
         </info>
      </var>
      <var name="mdiis3d_size" type="INTEGER" >
         <default> 10
         </default>
         <info>
Size of Modified DIIS (MDIIS) for 3D-RISM.
         </info>
      </var>
      <var name="mdiis1d_step" type="REAL" >
         <default> 0.5D0
         </default>
         <info>
Step of Modified DIIS (MDIIS) for 1D-RISM.
         </info>
      </var>
      <var name="mdiis3d_step" type="REAL" >
         <default> 0.8D0
         </default>
         <info>
Step of Modified DIIS (MDIIS) for 3D-RISM.
         </info>
      </var>
      <var name="rism1d_bond_width" type="REAL" >
         <info>
Gaussian width of bonds to smear intra-molecular correlation for 1D-RISM.
If 3D-RISM calculation, default is 0.
If Laue-RISM calculation, default is 2 / SQRT(<ref>ecutwfc</ref>).
         </info>
      </var>
      <var name="rism1d_dielectric" type="REAL" >
         <default> -1.0D0
         </default>
         <info>
Dielectric constant for 1D-RISM.
If <ref>rism1d_dielectric</ref> &gt; 0, dielectrically consistent RISM (DRISM) is performed.

For details of DRISM, see:
J.S.Perkyns and B.M.Pettitt, CPL 1992, 190, 626, <a href="https://doi.org/10.1016/0009-2614(92)85201-K">doi:10.1016/0009-2614(92)85201-K</a>
         </info>
      </var>
      <var name="rism1d_molesize" type="REAL" >
         <default> 2.0D0
         </default>
         <info>
Size of solvent molecules (a.u.) for 1D-RISM.
This is used only if <ref>rism1d_dielectric</ref> &gt; 0.
If you have large molecules, you have to set ~ 20 a.u. .
         </info>
      </var>
      <var name="rism1d_nproc" type="INTEGER" >
         <default> 128
         </default>
         <info>
Number of processes to calculate 1D-RISM.
         </info>
      </var>
      <var name="rism3d_conv_level" type="REAL" >
         <default>
0.1 if <ref>laue_both_hands</ref> == .FALSE. .AND. <ref>lgcscf</ref> == .FALSE.;
0.3 if <ref>laue_both_hands</ref> == .FALSE. .AND. <ref>lgcscf</ref> == .TRUE.;
0.5 if <ref>laue_both_hands</ref> == .TRUE.
         </default>
         <options>
            <info>
Convergence level of 3D-RISM.
            </info>
            <opt val="0.0" >
Convergence level is &apos;low&apos;.
Convergence threshold of 3D-RISM is greater than
<ref>rism3d_conv_thr</ref>, when estimated energy error &gt;&gt; <ref>conv_thr</ref> .
The threshold becomes <ref>rism3d_conv_thr</ref>, when
estimated energy error is enough small.
            </opt>
            <opt val="0.0&lt;x&lt;1.0" >
Convergence level is &apos;medium&apos;.
Convergence threshold of 3D-RISM is intermediate value
between &apos;low&apos; and &apos;high&apos;, where <ref>rism3d_conv_level</ref> is mixing rate.
            </opt>
            <opt val="1.0" >
Convergence level is &apos;high&apos;.
Convergence threshold of 3D-RISM is always <ref>rism3d_conv_thr</ref> .
            </opt>
         </options>
      </var>
      <var name="rism3d_planar_average" type="LOGICAL" >
         <info>
If .TRUE., planar averages of solvent densities and potentials
are calculated and written to &apos;prefix.rism1&apos;.
For 3D-RISM, default is .FALSE.
For Laue-RISM, default is .TRUE.
         </info>
      </var>
      <var name="laue_nfit" type="INTEGER" >
         <default> 4
         </default>
         <info>
The number of z-grid points for the polynomial fit along the cell edge.
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_expand_right" type="REAL" >
         <default> -1.0
         </default>
         <info>
If positive value, set the ending position offset [in a.u.]
of the solvent region on right-hand side of the unit cell,
measured relative to the unit cell edge.
(the solvent region ends at z = + [L_z/2 + <ref>laue_expand_right</ref>].)
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_expand_left" type="REAL" >
         <default> -1.0
         </default>
         <info>
If positive value, set the ending position offset [in a.u.]
of the solvent region on left-hand side of the unit cell,
measured relative to the unit cell edge.
(the solvent region ends at z = - [L_z/2 + <ref>laue_expand_left</ref>].)
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_starting_right" type="REAL" >
         <default> 0.0
         </default>
         <info>
Set the starting position [in a.u.] of the solvent region
on right-hand side of the unit cell. Then the solvent region is
defined as [ <ref>laue_starting_right</ref> , L_z/2 + <ref>laue_expand_right</ref> ],
where distribution functions are finite.
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_starting_left" type="REAL" >
         <default> 0.0
         </default>
         <info>
Set the starting position [in a.u.] of the solvent region
on left-hand side of the unit cell. Then the solvent region is
defined as [ -L_z/2 - <ref>laue_expand_left</ref> , <ref>laue_starting_left</ref> ],
where distribution functions are finite.
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_buffer_right" type="REAL" >
         <default>
 8.0 if <ref>laue_expand_right</ref> &gt; 0.0;
-1.0 if <ref>laue_expand_right</ref> &lt;= 0.0
         </default>
         <info>
If positive value, set the buffering length [in a.u.]
of the solvent region on right-hand side of the unit cell.
Then correlation functions are defined inside of
[ <ref>laue_starting_right</ref> - <ref>laue_buffer_right</ref> , L_z/2 + <ref>laue_expand_right</ref> ].
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_buffer_left" type="REAL" >
         <default>
 8.0 if <ref>laue_expand_left</ref> &gt; 0.0;
-1.0 if <ref>laue_expand_left</ref> &lt;= 0.0
         </default>
         <info>
If positive value, set the buffering length [in a.u.]
of the solvent region on left-hand side of the unit cell.
Then correlation functions are defined inside of
[ -L_z/2 - <ref>laue_expand_left</ref> , <ref>laue_starting_left</ref> + <ref>laue_buffer_left</ref> ].
This is only for Laue-RISM.
         </info>
      </var>
      <var name="laue_both_hands" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE., you can set different densities
to the solvent regions of right-hand side and left-hand side.
See <ref>SOLVENTS</ref> card.
         </info>
      </var>
      <var name="laue_wall" type="CHARACTER" >
         <default> &apos;auto&apos;
         </default>
         <options>
            <info>
Set the repulsive wall with (1/r)^12 term of Lennard-Jones potential.
This is only for Laue-RISM.
            </info>
            <opt val="'none'" >
The repulsive wall is not defined.
            </opt>
            <opt val="'auto'" >
The repulsive wall is defined, whose edge position is set automatically.
One does not have to set <ref>laue_wall_z</ref> (the edge position).
            </opt>
            <opt val="'manual'" >
The repulsive wall is defined, whose edge position is set manually.
One have to set <ref>laue_wall_z</ref> (the edge position).
            </opt>
         </options>
      </var>
      <var name="laue_wall_z" type="REAL" >
         <default> 0.0
         </default>
         <info>
Set the edge position [in a.u.] of the repulsive wall.
If <ref>laue_expand_right</ref> &gt; 0.0, the repulsive wall is defined on [ -inf , <ref>laue_wall_z</ref> ].
If <ref>laue_expand_left</ref> &gt; 0.0, the repulsive wall is defined on [ <ref>laue_wall_z</ref> , inf ].
This is only for Laue-RISM and <ref>laue_wall</ref> == &apos;manual&apos; .
         </info>
      </var>
      <var name="laue_wall_rho" type="REAL" >
         <default> 0.01
         </default>
         <info>
The density (1/bohr^3) of the repulsive wall.
This is only for Laue-RISM and <ref>laue_wall</ref> /= &apos;none&apos; .
         </info>
      </var>
      <var name="laue_wall_epsilon" type="REAL" >
         <default> 0.1
         </default>
         <info>
The Lennard-Jones potential of the repulsive wall.
Here, you can set the parameter &apos;epsilon&apos; (kcal/mol).
This is only for Laue-RISM and <ref>laue_wall</ref> /= &apos;none&apos; .
         </info>
      </var>
      <var name="laue_wall_sigma" type="REAL" >
         <default> 4.0
         </default>
         <info>
The Lennard-Jones potential of the repulsive wall.
Here, you can set the parameter &apos;sigma&apos; (Angstrom).
This is only for Laue-RISM and <ref>laue_wall</ref> /= &apos;none&apos; .
         </info>
      </var>
      <var name="laue_wall_lj6" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE., the attractive term -(1/r)^6 of Lennard-Jones potential is added.
This is only for Laue-RISM and <ref>laue_wall</ref> /= &apos;none&apos; .
         </info>
      </var>
   </namelist>
   <card name="ATOMIC_SPECIES" >
      <syntax>
         <table name="atomic_species" >
            <rows start="1" end="ntyp" >
               <col name="X" type="CHARACTER" >
                  <info>
label of the atom. Acceptable syntax:
chemical symbol X (1 or 2 characters, case-insensitive)
or chemical symbol plus a number or a letter, as in
&quot;Xn&quot; (e.g. Fe1) or &quot;X_*&quot; or &quot;X-*&quot; (e.g. C1, C_h;
max total length cannot exceed 3 characters)
                  </info>
               </col>
               <col name="Mass_X" type="REAL" >
                  <info>
mass of the atomic species [amu: mass of C = 12]
Used only when performing Molecular Dynamics run
or structural optimization runs using Damped MD.
Not actually used in all other cases (but stored
in data files, so phonon calculations will use
these values unless other values are provided)
                  </info>
               </col>
               <col name="PseudoPot_X" type="CHARACTER" >
                  <info>
File containing PP for this species.

The pseudopotential file is assumed to be in the new UPF format.
If it doesn&apos;t work, the pseudopotential format is determined by
the file name:

*.vdb or *.van     Vanderbilt US pseudopotential code
*.RRKJ3            Andrea Dal Corso&apos;s code (old format)
none of the above  old PWscf norm-conserving format
                  </info>
               </col>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="ATOMIC_POSITIONS" >
      <flag name="atompos_unit" use="optional" >
         <enum> alat | bohr | angstrom | crystal | crystal_sg
         </enum>
         <default> (DEPRECATED) alat
         </default>
         <options>
            <info>
Units for ATOMIC_POSITIONS:
            </info>
            <opt val="alat" >
atomic positions are in cartesian coordinates, in
units of the lattice parameter (either celldm(1)
or A). If no option is specified, &apos;alat&apos; is assumed;
not specifying units is DEPRECATED and will no
longer be allowed in the future
            </opt>
            <opt val="bohr" >
atomic positions are in cartesian coordinate,
in atomic units (i.e. Bohr radii)
            </opt>
            <opt val="angstrom" >
atomic positions are in cartesian coordinates, in Angstrom
            </opt>
            <opt val="crystal" >
atomic positions are in crystal coordinates, i.e.
in relative coordinates of the primitive lattice
vectors as defined either in card <ref>CELL_PARAMETERS</ref>
or via the ibrav + celldm / a,b,c... variables
            </opt>
            <opt val="crystal_sg" >
atomic positions are in crystal coordinates, i.e.
in relative coordinates of the primitive lattice.
This option differs from the previous one because
in this case only the symmetry inequivalent atoms
are given. The variable <ref>space_group</ref> must indicate
the space group number used to find the symmetry
equivalent atoms. The other variables that control
this option are uniqueb, origin_choice, and
rhombohedral.
            </opt>
         </options>
      </flag>
      <choose>
         <when test="calculation == 'bands' OR calculation == 'nscf'" >
            <message>
Specified atomic positions will be IGNORED and those from the
previous scf calculation will be used instead !!!
            </message>
         </when>
         <otherwise>
            <syntax>
               <table name="atomic_coordinates" >
                  <rows start="1" end="nat" >
                     <col name="X" type="CHARACTER" >
                        <info> label of the atom as specified in <ref>ATOMIC_SPECIES</ref>
                        </info>
                     </col>
                     <colgroup type="REAL" >
                        <info>
atomic positions

NOTE: each atomic coordinate can also be specified as a simple algebraic expression.
      To be interpreted correctly expression must NOT contain any blank
      space and must NOT start with a &quot;+&quot; sign. The available expressions are:

        + (plus), - (minus), / (division), * (multiplication), ^ (power)

      All numerical constants included are considered as double-precision numbers;
      i.e. 1/2 is 0.5, not zero. Other functions, such as sin, sqrt or exp are
      not available, although sqrt can be replaced with ^(1/2).

      Example:
            C  1/3   1/2*3^(-1/2)   0

      is equivalent to

            C  0.333333  0.288675  0.000000

      Please note that this feature is NOT supported by XCrysDen (which will
      display a wrong structure, or nothing at all).

      When atomic positions are of type crystal_sg coordinates can be given
      in the following four forms (Wyckoff positions):
         C  1a
         C  8g   x
         C  24m  x y
         C  48n  x y z
      The first form must be used when the Wyckoff letter determines uniquely
      all three coordinates, forms 2,3,4 when the Wyckoff letter and 1,2,3
      coordinates respectively are needed.

      The forms:
         C 8g  x  x  x
         C 24m x  x  y
      are not allowed, but
         C x x x
         C x x y
         C x y z
      are correct.
                        </info>
                        <col name="x" >
                        </col>
                        <col name="y" >
                        </col>
                        <col name="z" >
                        </col>
                     </colgroup>
                     <optional>
                        <colgroup type="INTEGER" >
                           <info>
component i of the force for this atom is multiplied by if_pos(i),
which must be either 0 or 1.  Used to keep selected atoms and/or
selected components fixed in MD dynamics or
structural optimization run.

With crystal_sg atomic coordinates the constraints are copied in all equivalent
atoms.
                           </info>
                           <default> 1
                           </default>
                           <col name="if_pos(1)" >
                           </col>
                           <col name="if_pos(2)" >
                           </col>
                           <col name="if_pos(3)" >
                           </col>
                        </colgroup>
                     </optional>
                  </rows>
               </table>
            </syntax>
         </otherwise>
      </choose>
   </card>
   <card name="K_POINTS" >
      <flag name="kpoint_type" use="optional" >
         <enum> tpiba | automatic | crystal | gamma | tpiba_b | crystal_b | tpiba_c | crystal_c
         </enum>
         <default> tbipa
         </default>
         <options>
            <info>
K_POINTS options are:
            </info>
            <opt val="tpiba" >
read k-points in cartesian coordinates,
in units of 2 pi/a (default)
            </opt>
            <opt val="automatic" >
automatically generated uniform grid of k-points, i.e,
generates ( nk1, nk2, nk3 ) grid with ( sk1, sk2, sk3 ) offset.
nk1, nk2, nk3 as in Monkhorst-Pack grids
k1, k2, k3 must be 0 ( no offset ) or 1 ( grid displaced
by half a grid step in the corresponding direction )
BEWARE: only grids having the full symmetry of the crystal
        work with tetrahedra. Some grids with offset may not work.
            </opt>
            <opt val="crystal" >
read k-points in crystal coordinates, i.e. in relative
coordinates of the reciprocal lattice vectors
            </opt>
            <opt val="gamma" >
use k = 0 (no need to list k-point specifications after card)
In this case wavefunctions can be chosen as real,
and specialized subroutines optimized for calculations
at the gamma point are used (memory and cpu requirements
are reduced by approximately one half).
            </opt>
            <opt val="tpiba_b" >
Used for band-structure plots.
See Doc/brillouin_zones.pdf for usage of BZ labels;
otherwise, k-points are in units of  2 pi/a.
nks points specify nks-1 lines in reciprocal space.
Every couple of points identifies the initial and
final point of a line. pw.x generates N intermediate
points of the line where N is the weight of the first point.
            </opt>
            <opt val="crystal_b" >
As tpiba_b, but k-points are in crystal coordinates.
See Doc/brillouin_zones.pdf for usage of BZ labels.
            </opt>
            <opt val="tpiba_c" >
Used for band-structure contour plots.
k-points are in units of  2 <i>pi/a.</i> nks must be 3.
3 k-points k_0, k_1, and k_2 specify a rectangle
in reciprocal space of vertices k_0, k_1, k_2,
k_1 + k_2 - k_0: k_0 + \alpha (k_1-k_0)+
\beta (k_2-k_0) with 0 &lt;\alpha,\beta &lt; 1.
The code produces a uniform mesh n1 x n2
k points in this rectangle. n1 and n2 are
the weights of k_1 and k_2. The weight of k_0
is not used.
            </opt>
            <opt val="crystal_c" >
As tpiba_c, but k-points are in crystal coordinates.
            </opt>
         </options>
      </flag>
      <choose>
         <when test="tpiba  OR  crystal  OR  tpiba_b  OR  crystal_b OR tpiba_c OR crystal_c" >
            <syntax flag="tpiba | crystal | tpiba_b | crystal_b | tpiba_c | crystal_c " >
               <line>
                  <var name="nks" type="INTEGER" >
                     <info> Number of supplied special k-points.
                     </info>
                  </var>
               </line>
               <table name="kpoints" >
                  <rows start="1" end="nks" >
                     <colgroup type="REAL" >
                        <col name="xk_x" >
                        </col>
                        <col name="xk_y" >
                        </col>
                        <col name="xk_z" >
                        </col>
                        <col name="wk" >
                        </col>
                        <info>
Special k-points (xk_x/y/z) in the irreducible Brillouin Zone
(IBZ) of the lattice (with all symmetries) and weights (wk)
See the literature for lists of special points and
the corresponding weights.

If the symmetry is lower than the full symmetry
of the lattice, additional points with appropriate
weights are generated. Notice that such procedure
assumes that ONLY k-points in the IBZ are provided in input

In a non-scf calculation, weights do not affect the results.
If you just need eigenvalues and eigenvectors (for instance,
for a band-structure plot), weights can be set to any value
(for instance all equal to 1).
                        </info>
                     </colgroup>
                  </rows>
               </table>
            </syntax>
         </when>
         <elsewhen test="automatic" >
            <syntax flag="automatic" >
               <line>
                  <vargroup type="INTEGER" >
                     <var name="nk1" >
                     </var>
                     <var name="nk2" >
                     </var>
                     <var name="nk3" >
                     </var>
                     <info>
These parameters specify the k-point grid
(nk1 x nk2 x nk3) as in Monkhorst-Pack grids.
                     </info>
                  </vargroup>
                  <vargroup type="INTEGER" >
                     <var name="sk1" >
                     </var>
                     <var name="sk2" >
                     </var>
                     <var name="sk3" >
                     </var>
                     <info>
The grid offsets;  sk1, sk2, sk3 must be
0 ( no offset ) or 1 ( grid displaced by
half a grid step in the corresponding direction ).
                     </info>
                  </vargroup>
               </line>
            </syntax>
         </elsewhen>
         <elsewhen test="gamma" >
            <syntax flag="gamma" >
            </syntax>
         </elsewhen>
      </choose>
   </card>
   <card name="ADDITIONAL_K_POINTS" >
      <message>
Optional card. Adds a list of k-points with zero weight, after those used for
the scf calculation. When doing an EXX calculation and <ref>nq1x</ref>, <ref>nq2x</ref> or <ref>nq3x</ref> are
different from one, also include the required <b>k+q</b> points. The main use of this
card is to do band plots with EXX.
      </message>
      <flag name="additional_kpoints_type" use="optional" >
         <enum> tpiba | crystal | tpiba_b | crystal_b | tpiba_c | crystal_c
         </enum>
         <default> tbipa
         </default>
         <info>
for the explanation of the K_POINTS&apos; options, see <ref>K_POINTS</ref>
         </info>
      </flag>
      <syntax flag="tpiba | crystal | tpiba_b | crystal_b | tpiba_c | crystal_c " >
         <line>
            <var name="nks_add" type="INTEGER" >
               <info> Number of supplied &quot;additional&quot; k-points.
               </info>
            </var>
         </line>
         <table name="kpoints" >
            <rows start="1" end="nks_add" >
               <colgroup type="REAL" >
                  <col name="k_x" >
                  </col>
                  <col name="k_y" >
                  </col>
                  <col name="k_z" >
                  </col>
                  <col name="wk_" >
                  </col>
                  <info>
for the respective explanation, see the <ref>xk_x</ref>, <ref>xk_y</ref>, <ref>xk_z</ref>, <ref>wk</ref>
                  </info>
               </colgroup>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="CELL_PARAMETERS" >
      <flag name="lattice_type" use="optional" >
         <enum> alat | bohr | angstrom
         </enum>
         <info>
Unit for lattice vectors; options are:

<b>&apos;bohr&apos;</b> / <b>&apos;angstrom&apos;:</b>
                     lattice vectors in bohr-radii / angstrom.
                     In this case the lattice parameter alat = sqrt(v1*v1).

<b>&apos;alat&apos;</b> / nothing specified:
                     lattice vectors in units of the lattice parameter (either
                     <ref>celldm</ref>(1) or <ref>A</ref>). Not specifying units is DEPRECATED
                     and will not be allowed in the future.

If neither unit nor lattice parameter are specified,
&apos;bohr&apos; is assumed - DEPRECATED, will no longer be allowed
         </info>
      </flag>
      <label>
Optional card, must be present if <ref>ibrav</ref> == 0, must be absent otherwise
      </label>
      <syntax>
         <table name="lattice" >
            <cols start="1" end="3" >
               <rowgroup type="REAL" >
                  <info>
Crystal lattice vectors (in cartesian axis):
    v1(1)  v1(2)  v1(3)    ... 1st lattice vector
    v2(1)  v2(2)  v2(3)    ... 2nd lattice vector
    v3(1)  v3(2)  v3(3)    ... 3rd lattice vector
                  </info>
                  <row name="v1" >
                  </row>
                  <row name="v2" >
                  </row>
                  <row name="v3" >
                  </row>
               </rowgroup>
            </cols>
         </table>
      </syntax>
   </card>
   <card name="CONSTRAINTS" >
      <label>
Optional card, used for constrained dynamics or constrained optimizations
(only if <ref>ion_dynamics</ref>==&apos;damp&apos; or &apos;verlet&apos;, variable-cell excepted)
      </label>
      <message>
When this card is present the SHAKE algorithm is automatically used.
      </message>
      <syntax>
         <line>
            <var name="nconstr" type="INTEGER" >
               <info> Number of constraints.
               </info>
            </var>
            <optional>
               <var name="constr_tol" type="REAL" >
                  <info> Tolerance for keeping the constraints satisfied.
                  </info>
               </var>
            </optional>
         </line>
         <table name="constraints_table" >
            <rows start="1" end="nconstr" >
               <col name="constr_type" type="CHARACTER" >
                  <options>
                     <info>
Type of constraint :
                     </info>
                     <opt val="'type_coord'" >
constraint on global coordination-number, i.e. the
average number of atoms of type B surrounding the
atoms of type A. The coordination is defined by
using a Fermi-Dirac.
(four indexes must be specified).
                     </opt>
                     <opt val="'atom_coord'" >
constraint on local coordination-number, i.e. the
average number of atoms of type A surrounding a
specific atom. The coordination is defined by
using a Fermi-Dirac.
(four indexes must be specified).
                     </opt>
                     <opt val="'distance'" >
constraint on interatomic distance
(two atom indexes must be specified).
                     </opt>
                     <opt val="'planar_angle'" >
constraint on planar angle
(three atom indexes must be specified).
                     </opt>
                     <opt val="'torsional_angle'" >
constraint on torsional angle
(four atom indexes must be specified).
                     </opt>
                     <opt val="'bennett_proj'" >
constraint on the projection onto a given direction
of the vector defined by the position of one atom
minus the center of mass of the others.
G. Roma, J.P. Crocombette: J. Nucl. Mater. 403, 32 (2010),
<a href="https://doi.org/10.1016/j.jnucmat.2010.06.001">doi:10.1016/j.jnucmat.2010.06.001</a>
                     </opt>
                     <opt val="'potential_wall'" >
(experimental) add a potential wall at the origin
normal to the the z-axis.
                     </opt>
                  </options>
               </col>
               <colgroup>
                  <col name="constr(1)" >
                  </col>
                  <col name="constr(2)" >
                  </col>
                  <conditional>
                     <col name="constr(3)" >
                     </col>
                     <col name="constr(4)" >
                     </col>
                  </conditional>
                  <info>
These variables have different meanings for different constraint types:

<b>&apos;type_coord&apos;</b> :
               <i>constr(1)</i> is the first index of the atomic type involved
               <i>constr(2)</i> is the second index of the atomic type involved
               <i>constr(3)</i> is the cut-off radius for estimating the coordination
               <i>constr(4)</i> is a smoothing parameter

<b>&apos;atom_coord&apos;</b> :
               <i>constr(1)</i> is the atom index of the atom with constrained coordination
               <i>constr(2)</i> is the index of the atomic type involved in the coordination
               <i>constr(3)</i> is the cut-off radius for estimating the coordination
               <i>constr(4)</i> is a smoothing parameter

<b>&apos;distance&apos;</b> :
               atoms indices object of the constraint, as they appear in
               the <ref>ATOMIC_POSITIONS</ref> card

<b>&apos;planar_angle&apos;,</b> <b>&apos;torsional_angle&apos;</b> :
               atoms indices object of the constraint, as they appear in the
               <ref>ATOMIC_POSITIONS</ref> card (beware the order)

<b>&apos;bennett_proj&apos;</b> :
               <i>constr(1)</i> is the index of the atom whose position is constrained.
               <i>constr(2:4)</i> are the three coordinates of the vector that specifies
               the constraint direction.
<b>&apos;potential_wall&apos;</b> :
               Formula is: External force = prefac * exponent * Exp(-exponent). Force is only applied
               on atoms within the cutoff.
               <i>constr(1)</i> is the prefactor
               <i>constr(2)</i> is the value in the exponent
               <i>constr(3)</i> is the cutoff (in a.u.)
                  </info>
               </colgroup>
               <optional>
                  <col name="constr_target" type="REAL" >
                     <info>
Target for the constrain ( angles are specified in degrees ).
This variable is optional.
                     </info>
                  </col>
               </optional>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="OCCUPATIONS" >
      <label> Optional card, used only if <ref>occupations</ref> == &apos;from_input&apos;, ignored otherwise !
      </label>
      <syntax>
         <table name="occupations_table" >
            <cols start="1" end="nbnd" >
               <row name="f_inp1" type="REAL" >
                  <info>
Occupations of individual states (MAX 10 PER ROW).
For spin-polarized calculations, these are majority spin states.
                  </info>
               </row>
               <conditional>
                  <row name="f_inp2" type="REAL" >
                     <info>
Occupations of minority spin states (MAX 10 PER ROW)
To be specified only for spin-polarized calculations.
                     </info>
                  </row>
               </conditional>
            </cols>
         </table>
      </syntax>
   </card>
   <card name="ATOMIC_VELOCITIES" >
      <flag name="atomvel_type" use="optional" >
         <enum> a.u
         </enum>
      </flag>
      <label>
Optional card, reads velocities from standard input
      </label>
      <syntax>
         <table name="atomic_velocities" >
            <rows start="1" end="nat" >
               <col name="V" type="CHARACTER" >
                  <info> label of the atom as specified in ATOMIC_SPECIES
                  </info>
               </col>
               <colgroup type="REAL" >
                  <info> atomic velocities along x y and z direction
                  </info>
                  <col name="vx" >
                  </col>
                  <col name="vy" >
                  </col>
                  <col name="vz" >
                  </col>
               </colgroup>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="ATOMIC_FORCES" >
      <label> Optional card used to specify external forces acting on atoms.
      </label>
      <message>
BEWARE: if the sum of external forces is not zero, the center of mass of
        the system will move
      </message>
      <syntax>
         <table name="atomic_forces" >
            <rows start="1" end="nat" >
               <col name="X" type="CHARACTER" >
                  <info> label of the atom as specified in <ref>ATOMIC_SPECIES</ref>
                  </info>
               </col>
               <colgroup type="REAL" >
                  <info>
external force on atom X (cartesian components, Ry/a.u. units)
                  </info>
                  <col name="fx" >
                  </col>
                  <col name="fy" >
                  </col>
                  <col name="fz" >
                  </col>
               </colgroup>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="SOLVENTS" >
      <flag name="solvents_unit" use="optional" >
         <enum> 1/cell | mol/L | g/cm^3
         </enum>
         <options>
            <opt val="1/cell" >
solvent&apos;s densities are specified
as number of molecules in the unit cell.
            </opt>
            <opt val="mol/L" >
solvent&apos;s densities are specified as molar concentrations.
            </opt>
            <opt val="g/cm^3" >
solvent&apos;s densities are in gram per cm^3.
            </opt>
         </options>
      </flag>
      <label>
Optional card, used only if <ref>trism</ref> = .TRUE., ignored otherwise !
      </label>
      <choose>
         <when test="laue_both_hands = .FALSE." >
            <syntax>
               <table name="solvent" >
                  <rows start="1" end="nsolv" >
                     <col name="X" type="CHARACTER" >
                        <info>
label of the solvent molecule.
                        </info>
                     </col>
                     <col name="Density" type="REAL" >
                        <info>
density of the solvent molecule.
if not positive value is set, density is read from MOL-file.
                        </info>
                     </col>
                     <col name="Molecule" type="CHARACTER" >
                        <info>
MOL-file of the solvent molecule.
in the MOL-file, molecular structure and some other data are written.
                        </info>
                     </col>
                  </rows>
               </table>
            </syntax>
         </when>
         <elsewhen test="laue_both_hands = .TRUE." >
            <syntax>
               <table name="solvent" >
                  <rows start="1" end="nsolv" >
                     <col name="X" type="CHARACTER" >
                        <info>
label of the solvent molecule.
                        </info>
                     </col>
                     <col name="Density_Left" type="REAL" >
                        <info>
density of the solvent molecule in the left-hand side.
if not positive value is set, density is read from MOL-file.
                        </info>
                     </col>
                     <col name="Density_Right" type="REAL" >
                        <info>
density of the solvent molecule in the right-hand side.
if not positive value is set, density is read from MOL-file.
                        </info>
                     </col>
                     <col name="Molecule" type="CHARACTER" >
                        <info>
MOL-file of the solvent molecule.
in the MOL-file, molecular structure and some other data are written.
                        </info>
                     </col>
                  </rows>
               </table>
            </syntax>
         </elsewhen>
      </choose>
   </card>
   <card name="HUBBARD" >
      <flag name="hubbard_type" >
         <enum> atomic | ortho-atomic | norm-atomic | wf | pseudo
         </enum>
         <options>
            <info>
<b>HUBBARD</b> options are:
            </info>
            <opt val="atomic" >
use atomic orbitals (read from pseudopotential) to build the
Hubbard projectors
            </opt>
            <opt val="ortho-atomic" >
use Lowdin orthogonalized atomic orbitals. This option is
recommended to be used whenever possible instead of atomic
because it allows to avoid applying Hubbard corrections twice
in the orbital overlap regions.
            </opt>
            <opt val="norm-atomic" >
Lowdin normalization of atomic orbitals. Keep in mind:
atomic orbitals are not orthogonalized in this case.
This is a &quot;quick and dirty&quot; trick to be used when
atomic orbitals from the pseudopotential are not
normalized (and thus produce occupation whose
value exceeds unity).
            </opt>
            <opt val="wf" >
use Wannier functions to built Hubbard projectors.
The information about the Wannier functionas are read
from file &quot;prefix&quot;.hub that must be generated using pmw.x
(see PP/src/poormanwannier.f90 for details).
Note: these are not maximally localized Wannier functions.
(see PP/examples/example05)
            </opt>
            <opt val="pseudo" >
use the pseudopotential projectors. The charge density
outside the atomic core radii is excluded.
N.B.: for atoms with +U, a pseudopotential with the
all-electron atomic orbitals are required (i.e.,
as generated by ld1.x with lsave_wfc flag).
            </opt>
            <info>
NB: forces and stress are currently implemented only for the
&apos;atomic&apos;, &apos;ortho-atomic&apos;, and &apos;pseudo&apos; Hubbard projectors.
            </info>
            <info>
Check Doc/Hubbard_input.pdf to see how to specify Hubbard parameters
U, J0, J, B, E2, E3, V in the HUBBARD card.
            </info>
         </options>
      </flag>
      <choose>
         <when test="DFT+U" >
            <syntax flag=" atomic | ortho-atomic | norm-atomic | wf | pseudo " >
               <line>
                  <vargroup type="CHARACTER-LITERAL, CHARACTER, REAL" >
                     <keyword name="U" >
                     </keyword>
                     <var name="label(1)-manifold(1)" >
                     </var>
                     <var name="u_val(1)" >
                     </var>
                     <info>
<b>Syntax:</b>
  <b>U</b> <i>label-manifold u_val</i>

<b>Where:</b>
<b>U</b>        = string constant &quot;U&quot;; indicates the specs for the <i>U</i> parameter will be given
<i>label</i>    = label of the atom (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold</i> = specs of the manifold (e.g., 3d, 2p...)
<i>u_val</i>    = value of the <i>U</i> parameter (in eV)

<b>Example:</b>
HUBBARD (ortho-atomic)
  U Mn-3d 5.0
  U Ni-3d 6.0
                     </info>
                  </vargroup>
               </line>
               <line>
                  <conditional>
                     <vargroup type="CHARACTER-LITERAL, CHARACTER, REAL" >
                        <keyword name="J0" >
                        </keyword>
                        <var name="label(1)-manifold(1)" >
                        </var>
                        <var name="j0_val(1)" >
                        </var>
                        <info>
<b>Remark:</b> specs of <b>J0</b> parameters are optional

<b>Syntax:</b>
  <b>J0</b> <i>label-manifold j0_val</i>

<b>Where:</b>
<b>J0</b>       = string constant &quot;J0&quot;; indicates the specs for the <i>J0</i> parameter will be given
<i>label</i>    = label of the atom (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold</i> = specs of the manifold (e.g., 3d, 2p...)
<i>j0_val</i>   = value of the <i>J0</i> parameter (in eV)

<b>Example:</b>
  HUBBARD (ortho-atomic)
  U  Mn-3d 5.0
  J0 Mn-3d 1.0
  U  Ni-3d 6.0
  J0 Ni-3d 1.2
                        </info>
                     </vargroup>
                  </conditional>
               </line>
               <line>
                  <etc>
                  </etc>
               </line>
               <line>
                  <vargroup type="CHARACTER-LITERAL, CHARACTER, REAL" >
                     <keyword name="U" >
                     </keyword>
                     <var name="label(n)-manifold(n)" >
                     </var>
                     <var name="u_val(n)" >
                     </var>
                  </vargroup>
               </line>
               <line>
                  <conditional>
                     <vargroup type="CHARACTER-LITERAL, CHARACTER, REAL" >
                        <keyword name="J0" >
                        </keyword>
                        <var name="label(n)-manifold(n)" >
                        </var>
                        <var name="j0_val(n)" >
                        </var>
                     </vargroup>
                  </conditional>
               </line>
            </syntax>
         </when>
         <elsewhen test="DFT+U+J" >
            <syntax flag=" atomic | ortho-atomic | norm-atomic | wf | pseudo " >
               <line>
                  <vargroup type="CHARACTER, CHARACTER, REAL" >
                     <var name="paramType(1)" >
                     </var>
                     <var name="label(1)-manifold(1)" >
                     </var>
                     <var name="paramValue(1)" >
                     </var>
                     <info>
<b>Syntax</b> of the line:

  <i>paramType label-manifold paramValue</i>

<b>Where:</b>
<i>paramType</i>  = character describing the type of Hubbard parameter
             allowed values: <b>U,</b> <b>J</b> and either <b>B</b> (for d-orbitals) or <b>E2</b> and <b>E3</b> (for f-orbitals)
<i>label</i>      = label of the atom (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold</i>   = specs of the manifold (e.g., 3d, 2p...)
<i>paramValue</i> = value of the parameter (in eV)

<b>Example:</b>
  HUBBARD (ortho-atomic)
  U Mn-3d 5.0
  J Mn-3d 1.0
  B Mn-3d 1.1
  U Ni-3d 6.0
  J Ni-3d 1.2
  B Ni-3d 1.3
                     </info>
                  </vargroup>
               </line>
               <line>
                  <etc>
                  </etc>
               </line>
               <line>
                  <vargroup type="CHARACTER, CHARACTER, REAL" >
                     <var name="paramType(n)" >
                     </var>
                     <var name="label(n)-manifold(n)" >
                     </var>
                     <var name="paramValue(n)" >
                     </var>
                  </vargroup>
               </line>
            </syntax>
         </elsewhen>
         <elsewhen test="DFT+U+V" >
            <syntax flag=" atomic | ortho-atomic | norm-atomic | wf | pseudo " >
               <line>
                  <vargroup type="CHARACTER, REAL" >
                     <keyword name="U" >
                     </keyword>
                     <var name="label(I)-manifold(I)" >
                     </var>
                     <var name="u_val(I)" >
                     </var>
                     <info>
<b>Syntax</b> of the line:

  <b>U</b> <i>label-manifold u_val</i>

<b>Where:</b>
<b>U</b>        = string constant &quot;U&quot;; indicates the specs for the <i>U</i> parameter will be given
<i>label</i>    = label of the atom (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold</i> = specs of the manifold (e.g., 3d, 2p...)
<i>u_val</i>    = value of the <i>U</i> parameter (in eV)
                     </info>
                  </vargroup>
               </line>
               <line>
                  <conditional>
                     <vargroup type="CHARACTER, REAL" >
                        <keyword name="J0" >
                        </keyword>
                        <var name="label(I)-manifold(I)" >
                        </var>
                        <var name="j0_val(I)" >
                        </var>
                        <info>
<b>Remark:</b> specs of <b>J0</b> parameters are optional

<b>Syntax</b> of the line:

  <b>J0</b> <i>label(I)-manifold(I) j0_val(I)</i>

<b>Where:</b>
<b>J0</b>       = string constant &quot;J0&quot;; indicates the specs for the <i>J0</i> parameter will be given
<i>label</i>    = label of the atom (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold</i> = specs of the manifold (e.g., 3d, 2p...)
<i>j0_val</i>   = value of the <i>J0</i> parameter (in eV)
                        </info>
                     </vargroup>
                  </conditional>
               </line>
               <line>
                  <vargroup type="CHARACTER, CHARACTER, INTEGER, INTEGER, REAL" >
                     <keyword name="V" >
                     </keyword>
                     <var name="label(I)-manifold(I)" >
                     </var>
                     <var name="label(J)-manifold(J)" >
                     </var>
                     <var name="I" >
                     </var>
                     <var name="J" >
                     </var>
                     <var name="v_val(I,J)" >
                     </var>
                     <info>
<b>Syntax</b> of the line:

  <b>V</b> <i>label(I)-manifold(J) label(J)-manifold(J) I J v_val(I,J)</i>

<b>Where:</b>
<b>V</b>           = string constant &quot;V&quot;; indicates the specs for the <i>V</i> parameter will be given
<i>label(I)</i>    = label of the atom <i>I</i> (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold(I)</i> = specs of the manifold for atom <i>I</i> (e.g., 3d, 2p...)
<i>label(J)</i>    = label of the atom <i>J</i> (as defined in <ref>ATOMIC_SPECIES</ref>)
<i>manifold(J)</i> = specs of the manifold for atom <i>J</i> (e.g., 3d, 2p...)
<i>I</i>           = index of the atom <i>I</i>
<i>J</i>           = index of the atom <i>J</i>
<i>v_val(I,J)</i>  = value of the <i>V</i> parameter for the atom pair <i>I,J</i> (in eV)

<b>Example:</b>
  HUBBARD (ortho-atomic)
  U Co-3d 7.70
  V Co-3d O-2p 1 19 0.75
  V Co-3d O-2p 1 46 0.75
  V Co-3d O-2p 1 43 0.75
  V Co-3d O-2p 1 54 0.75
  V Co-3d O-2p 1 11 0.75
  V Co-3d O-2p 1 22 0.75
                     </info>
                  </vargroup>
               </line>
               <line>
                  <etc>
                  </etc>
               </line>
               <line>
                  <vargroup type="CHARACTER, REAL" >
                     <keyword name="U" >
                     </keyword>
                     <var name="label(N)-manifold(N)" >
                     </var>
                     <var name="u_val(N)" >
                     </var>
                  </vargroup>
               </line>
               <line>
                  <conditional>
                     <vargroup type="CHARACTER, REAL" >
                        <keyword name="J0" >
                        </keyword>
                        <var name="label(N)-manifold(N)" >
                        </var>
                        <var name="j0_val(N)" >
                        </var>
                     </vargroup>
                  </conditional>
               </line>
               <line>
                  <vargroup type="CHARACTER, REAL" >
                     <keyword name="V" >
                     </keyword>
                     <var name="label(N)-manifold(N)" >
                     </var>
                     <var name="label(M)-manifold(M)" >
                     </var>
                     <var name="N" >
                     </var>
                     <var name="M" >
                     </var>
                     <var name="v_val(N,M)" >
                     </var>
                  </vargroup>
               </line>
            </syntax>
         </elsewhen>
      </choose>
   </card>
</input_description>
